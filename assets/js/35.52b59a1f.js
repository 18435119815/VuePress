(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{677:function(s,a,n){"use strict";n.r(a);var e=n(88),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"webpack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[s._v("#")]),s._v(" webpack")]),s._v(" "),n("ul",[n("li",[s._v("webpack is a module bundler(模块打包⼯工具)")]),s._v(" "),n("li",[s._v("Webpack是一个打包模块化JavaScript的⼯工具，它会从⼊⼝模块出发，识别出源码中的模块化导入语句，递归地找出⼊口文件的所有依赖，将入口和其所有的依赖打包到⼀个单独的⽂件中")]),s._v(" "),n("li",[s._v("是工程化、⾃动化思想在前端开发中的体现")])]),s._v(" "),n("h2",{attrs:{id:"小知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小知识"}},[s._v("#")]),s._v(" 小知识")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("-D 开发依赖   信息会被记录到devDependencies中  在开发过程中需要，线上环境不需要的。比如格式校验，编码转换这一类的，webpack、jquery")])]),s._v(" "),n("li",[n("p",[s._v("-S 生产依赖   信息会被记录到dependencies中  在线上环境仍然需要的。比如vue,element-ui,node-sass (运行完就会转译，所以不需要，一个典型的开发依赖)")])]),s._v(" "),n("li",[n("p",[s._v("示例")]),s._v(" "),n("ul",[n("li",[s._v("npm install md5 --save               把md5设置为当前项目的运行依赖")]),s._v(" "),n("li",[s._v("npm install node-sass --save-dev     把node-sass设置为当前项目的开发依赖")]),s._v(" "),n("li",[s._v("npm install node-sass  -g            全局安装  安装到电脑上的某个固定位置 这个位置所处的位置会在node.js被安装的时候自动添加到电脑的全局变量中的path->就可以直接在命令行中执行这个命令了")])])]),s._v(" "),n("li",[n("p",[s._v("运行webpack打包 npx webpack")])]),s._v(" "),n("li",[n("p",[s._v("webpack执行构建的时候,会先在目录中寻找webpack.config.js的配置文件,没找的话就会按照webpack默认配置构建")])])]),s._v(" "),n("h3",{attrs:{id:"默认配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认配置"}},[s._v("#")]),s._v(" 默认配置")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    const path = require("path");\n    module.exports = {\n        // 必填 webpack执⾏行行构建⼊入⼝口\n        entry: "./src/index.js",\n        output: {\n            // 将所有依赖的模块合并输出到main.js\n            filename: "main.js",\n            // 输出⽂文件的存放路路径，必须是绝对路路径\n            path: path.resolve(__dirname, "./dist")\n        }\n    };\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"entry入口文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entry入口文件"}},[s._v("#")]),s._v(" entry入口文件")]),s._v(" "),n("blockquote",[n("p",[s._v("指定webpack打包⼊⼝文件:Webpack 执行构建的第⼀步将从Entry 开始，可抽象成输⼊")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//单⼊入⼝口 SPA，本质是个字符串串\nentry:{\n    main: \'./src/index.js\'\n}\n==相当于简写===\nentry:"./src/index.js"\n\n//多⼊⼝ entry是个对象\nentry:{\n    index:"./src/index.js",\n    login:"./src/login.js"\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"output出口文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#output出口文件"}},[s._v("#")]),s._v(" output出口文件")]),s._v(" "),n("blockquote",[n("p",[s._v("打包转换后的⽂件输出到磁盘位置:输出结果，在 Webpack 经过⼀系列处理并得出最终想要的代码后输出结果")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('output: {\n    filename: "bundle.js",//输出⽂件的名称\n    path: path.resolve(__dirname, "dist")//输出⽂件到磁盘的⽬录，必须是绝对路径\n},\n//多⼊⼝的处理\noutput: {\n    filename: "[name][chunkhash:8].js",//利⽤占位符，⽂件名称不不要重复\n    path: path.resolve(__dirname, "dist")//输出⽂件到磁盘的⽬录，必须是绝对路径\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"占位符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#占位符"}},[s._v("#")]),s._v(" 占位符")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("output设置出口文件的名称时，可以使用占位符")])]),s._v(" "),n("li",[n("p",[s._v("占位符有4个  [name]  [hash]  [chunkhash] [id]")])]),s._v(" "),n("li",[n("p",[s._v("[name]： 表示entry创建对象的时候，前面的那个key，生成的名字就是key，如index.js的index")])]),s._v(" "),n("li",[n("p",[s._v("[hash]：是每次打包时，生成的整个项目的唯一hash")])]),s._v(" "),n("li",[n("p",[s._v("[chunkhash]:就是每次打包时，每个chunk 对应的hash值")])]),s._v(" "),n("li",[n("p",[s._v("id: 模块标识符")])])])])}),[],!1,null,null,null);a.default=t.exports}}]);