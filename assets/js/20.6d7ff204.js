(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{662:function(s,n,a){"use strict";a.r(n);var e=a(88),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"实战面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战面试题"}},[s._v("#")]),s._v(" 实战面试题")]),s._v(" "),a("h2",{attrs:{id:"格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式"}},[s._v("#")]),s._v(" 格式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("   有三个判断数组的方法，请说出他们的区别和优劣      \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("解析：")])]),s._v(" "),a("h2",{attrs:{id:"连等号的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连等号的应用"}},[s._v("#")]),s._v(" 连等号的应用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    var a = {n:1};\n    var b = a;              //此时a,b都指向了同一个地址的引用\n    a.x = a = {n:2};\n\n    console.log(a.x);       \n    console.log(b.x);      \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ol",[a("li",[s._v("连等开始前程序会把所有的引用都保存下来")]),s._v(" "),a("li",[s._v("连等的过程中这些值是不变的")]),s._v(" "),a("li",[s._v("等到连等结束了，这些值同时变")])]),s._v(" "),a("p",[a("strong",[s._v("解析：")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("a一开始指向了{n:1}这个对象的引用地址，b=a，所以b也指向了同一个对象；")])]),s._v(" "),a("li",[a("p",[s._v("连等从右往左执行，a指向了新的对象{n:2}，")])]),s._v(" "),a("li",[a("p",[s._v("连等开始前会先保存引用，所以a.x改变的是{n:1}这个对象的值，此时这个对象变成了{n:1，x:{n:2}},所以b现在等于这个值")])])]),s._v(" "),a("h2",{attrs:{id:"判断数组的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数组的方法"}},[s._v("#")]),s._v(" 判断数组的方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("   有三个判断数组的方法，请说出他们的区别和优劣   \n   1.   Object.prototype.toString.call()\n   2.   Array.isArray()\n   3.   instanceof   \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("解析：")])]),s._v(" "),a("ul",[a("li",[s._v("方法一出来的结果是个字符串[object Array],而且写起来很麻烦")]),s._v(" "),a("li",[s._v("方法二三都可以用于判断继承子类，写起来也相对方便")])]),s._v(" "),a("h2",{attrs:{id:"async-await和promise的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await和promise的使用"}},[s._v("#")]),s._v(" async/await和promise的使用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//使用async/await promise实现一个sleep()函数，使得sleep(1000)就是等待1s的效果      \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("解析：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function sleep(ms){\n    return new Promise(reslove=>{\n        setTimeout(()=>{reslove()},ms)\n    })\n}\nasync function num(){\n    console.log(1)\n\n    await sleep(2000);\n\n    console.log(2)\n}\nnum()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"多维数组的处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多维数组的处理"}},[s._v("#")]),s._v(" 多维数组的处理")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("arr = [[1,2,2],3,[[4,4,6,7,[8]]],[9,10,11],12,[13]]\n编写一个程序对数组进行扁平化、去重、升序处理    \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("解析：")])]),s._v(" "),a("ol",[a("li",[s._v("扁平化处理即变成一维数组，可以利用for循环和递归对数组中的每个元素进行判断，非数组则push到新数组中")]),s._v(" "),a("li",[s._v("去重可以利用instanceOf，新数组中没有再push进去")]),s._v(" "),a("li",[s._v("排序则是利用双重for循环来处理，内层每循环一次，都会将一个最大数字放置到数组末尾，以此类推")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const newArr = []\nfunction oneArr(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] instanceof Array) {\n            oneArr(arr[i])\n        } else {\n            if (newArr.indexOf(arr[i]) == -1) {\n                newArr.push(arr[i])\n            }\n        }\n    }\n}\noneArr(arr)\n\nfor(let i=0;i<newArr.length-1;i++){\n    for(let j=0;j<newArr.length-1-i;j++){\n        if(newArr[j]>newArr[j+1]){\n            let newA  = newArr[j];\n            newArr[j]  = newArr[j+1];\n            newArr[j+1] = newA;\n        }\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h2",{attrs:{id:"执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行顺序"}},[s._v("#")]),s._v(" 执行顺序")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("        //第一题\n        async function test1(){\n            console.log('test1 begin');\n            let result = await test2();\n            console.log('result',result);\n            console.log('tes1 end')\n        }\n\n        async function test2(){\n            console.log('test2')\n        }\n\n\n        console.log('开始执行')\n        test1().then(res=>{\n            console.log('then')\n        })\n\n        setTimeout(()=>{\n            console.log('setTimeOut')\n        },1000)\n        \n        console.log('结束执行')    \n\n        //第二题\n        async function async1(){            \n            console.log('async1 start');\n            await async2();\n            console.log('async1 end')\n        }\n\n        async function async2(){            \n            console.log('async2')\n        }\n\n        console.log('script start');         \n\n        async1();\n\n        new Promise((resolve)=>{             //promise初始化传入的函数会立即执行\n            console.log('promise1');\n            resolve();\n        }).then(()=>{\n            console.log('promise2')\n        })\n\n        console.log('script end')            //同步任务\n\n        // 'script start'  'async1 start'  'async2' 'promise1' 'script end' 'async1 end' 'promise2'\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("p",[a("strong",[s._v("解析：")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("第一题")]),s._v(" "),a("ol",[a("li",[s._v("考点在于await  .then   setTimeOut的执行顺序")]),s._v(" "),a("li",[s._v("test1和test2虽然是异步函数，但仍然会立即执行，但是await之后的代码都会被放倒异步执行队列中去，效果相当于把它们全都放在了setTomeOut中")]),s._v(" "),a("li",[s._v("'开始执行'  'test begin'   'test2'   '结束执行'  'result undefined' 'test1 end'  'then'  'setTimeOut'")])])]),s._v(" "),a("li",[a("p",[s._v("第二题")]),s._v(" "),a("ol",[a("li",[s._v("难点在于await后面部分的代码的执行顺序，这部分代码会被作为微任务执行")]),s._v(" "),a("li",[s._v("即async1中的"),a("code",[s._v("console.log('async1 end')")])])])])]),s._v(" "),a("h2",{attrs:{id:"promise的连续调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise的连续调用"}},[s._v("#")]),s._v(" Promise的连续调用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    Promise.resolve()\n        .then(()=>{\n            console.log(1);\n            throw Error('err');\n        }).catch(()=>{\n            console.log(2);\n        }).then(()=>{\n            console.log(3);\n        })\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("解析：")])]),s._v(" "),a("ol",[a("li",[s._v("resolve是成功的回调，所以会进入then输出1")]),s._v(" "),a("li",[s._v("接着抛出了错误会被catch捕获，输出2")]),s._v(" "),a("li",[s._v("catch执行成功之后会返回一个成功的回调，所以进入then。输出3")])]),s._v(" "),a("h2",{attrs:{id:"js预解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js预解析"}},[s._v("#")]),s._v(" JS预解析")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    //1.\n    alert(a);\n    var a = 10;\n    alert(a);\n    function a(){\n        alert(20)\n    }\n    alert(a);\n    var a = 30;\n    alert(a);\n    function a(){\n        alert(40)\n    }\n    alert(a);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[a("strong",[s._v("解析：")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("预解析的题可以分为两步，第一步定义，先从全局中找出var和函数声明，变量名相同的情况下，函数会优先，覆盖掉var。第二步就是执行了。")])]),s._v(" "),a("li",[a("p",[s._v("第一题")]),s._v(" "),a("ol",[a("li",[s._v("定义。又有var又有函数，函数优先，最后alert40的函数a被置于顶层。所以第一个结果是function a(){alert(40)}")]),s._v(" "),a("li",[s._v("执行。var a = 10改变了变量值，所以第二个结果为10。")]),s._v(" "),a("li",[s._v("function a(){alert(30)} 虽然定义但未被执行，所以不会影响a的值，第三个结果还是10。")]),s._v(" "),a("li",[s._v("后面同理。")])])])]),s._v(" "),a("h2",{attrs:{id:"堆栈内存的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆栈内存的理解"}},[s._v("#")]),s._v(" 堆栈内存的理解")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("   let a = 0;\n   b = a;\n   b++;\n   alert(a);\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("解析：")])]),s._v(" "),a("ol",[a("li",[s._v("a指向内存空间中的0；")]),s._v(" "),a("li",[s._v("b = a;所以b也指向了0；")]),s._v(" "),a("li",[s._v("b++就是b = b+1;所以b又指向了内存空间中的1，与0的关联断开；")]),s._v(" "),a("li",[s._v("a还是之前的0；")]),s._v(" "),a("li",[s._v("alert的值都经过toString()处理，所以结果是字符串'0';")])]),s._v(" "),a("p",[s._v("这个题里有两个考点，一个是对于堆栈内存的理解，另外一个是alert的值会被toString()处理。")]),s._v(" "),a("p",[s._v("JS中所有变量赋值都会经过三个阶段（例如 let a = 0）：")]),s._v(" "),a("ol",[a("li",[s._v("在VO中开辟一块区域创建变量 a")]),s._v(" "),a("li",[s._v("在VO中开辟一块区域创建值 0")]),s._v(" "),a("li",[s._v("将值和变量关联")])]),s._v(" "),a("h2",{attrs:{id:"this指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this指向"}},[s._v("#")]),s._v(" this指向")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    function Fn() {};\n\n    Fn.prototype.name = '时间跳跃';\n\n    function fn() {\n        console.log(this.name);\n    };\n\n    let obj = new Fn();\n\n    obj.func = fn;\n\n    let obj1 = {\n        name: '听风是风',\n        o: obj\n    };\n\n    obj1.o.func()    \n    输出什么？ \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[a("strong",[s._v("解析：")])]),s._v(" "),a("ol",[a("li",[s._v("obj1.o.func()  最终调用fn函数的是obj对象，所以this指向obj")]),s._v(" "),a("li",[s._v("obj自身没有name属性，顺着原型链找到了Fn的原型属性")]),s._v(" "),a("li",[s._v("所以答案是时间跳跃")])])])}),[],!1,null,null,null);n.default=t.exports}}]);