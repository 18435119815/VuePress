(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{671:function(s,a,t){"use strict";t.r(a);var e=t(88),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"理论面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#理论面试题"}},[s._v("#")]),s._v(" 理论面试题")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://vue3js.cn/interview/",target:"_blank",rel:"noopener noreferrer"}},[s._v("前端面试题汇总"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[s._v("#")]),s._v(" VUE")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV1CF41137St",target:"_blank",rel:"noopener noreferrer"}},[s._v("【Vue面试专题】金三银四必备！56道经典Vue面试题详解！"),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"_0-通用格式-复制用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-通用格式-复制用"}},[s._v("#")]),s._v(" 0.   通用格式（复制用）")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1876067",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1)]),s._v(" "),t("blockquote"),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  \n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"_1-history-和-hash-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-history-和-hash-的区别"}},[s._v("#")]),s._v(" 1.\thistory 和 hash 的区别")]),s._v(" "),t("blockquote",[t("p",[s._v("为了构建单页面页面，需要引入前端路由，而前端路由的核心，就是改变URL不会向服务端发起请求")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("p",[s._v("hash模式下的地址栏里的URL夹杂着‘#’号 ，而history模式下没有。vue默认使用hash")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("hash")]),t("br"),s._v("\nhash通过onhashchange事件去监听location.hash的改变;"),t("br"),s._v(" "),t("strong",[s._v("特点：")])],1),s._v(" "),t("ol",[t("li",[s._v("hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。")]),s._v(" "),t("li",[s._v("支持低版本浏览器和IE浏览器")])]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("history")]),t("br"),s._v("\nhistory通过H5新增的pushState() 和 replaceState()来实现。")],1),s._v(" "),t("ol",[t("li",[s._v("pushState()方法可以改变URL地址且不会发送请求，replaceState()方法可以读取历史记录栈，还可以对浏览器记录进行修改。")]),s._v(" "),t("li",[s._v("pushState() 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 hash 只可修改 # 后面的部分，因此只能设置与当前 URL 同文档的 URL；")]),s._v(" "),t("li",[s._v("pushState() 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 hash 设置的新值必须与原来不一样才会触发动作将记录添加到栈中；")]),s._v(" "),t("li",[s._v("pushState() 通过 stateObject 参数可以添加任意类型的数据到记录中；而 hash 只可添加短字符串；")]),s._v(" "),t("li",[s._v("pushState() 可额外设置 title 属性供后续使用。")])]),s._v(" "),t("p",[t("strong",[s._v("问题：")]),t("br"),s._v("\nhistory模式的问题\n不怕前进，不怕后退，就怕刷新（如果后端没有准备的话）,因为刷新是实实在在地去请求服务器的。如果服务器中没有相应的响应或者资源，则会刷新出来404页面。"),t("br"),s._v("\n所以需要服务端作处理，如果找不到对应的页面也返回index.html，前端路由则根据路径的切换去做一个相应的处理")])]),s._v(" "),t("h3",{attrs:{id:"_2-计算属性-和-watch-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-计算属性-和-watch-的区别"}},[s._v("#")]),s._v(" 2.\t计算属性 和 watch 的区别")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("p",[s._v("既能用computed 实现又可以用 watch 监听来实现的功能，推荐用 computed，重点在于 computed 的缓存功能")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("计算属性computed")])],1),s._v(" "),t("ol",[t("li",[s._v("computed计算属性适用于当某个数据需要依赖好几个数据进行变动的时候使用。")]),s._v(" "),t("li",[s._v("当计算属性依赖的数据没有发生变化的时候，我们调用n次，只会执行一次，其他时候用的都是缓存")]),s._v(" "),t("li",[s._v("计算属性也有自己的get和set属性，get用来获取值，set是修改计算属性时可以执行一些其他操作")])]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("watch监听")]),t("br"),s._v("\nwatch是当我们希望在某个值发生变化的时候，执行一些复杂的操作或者异步操作时使用。")],1)]),s._v(" "),t("h3",{attrs:{id:"_3-vue-x都有哪些属性-及其作用-如何存储数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue-x都有哪些属性-及其作用-如何存储数据"}},[s._v("#")]),s._v(" 3.\tVue-x都有哪些属性，及其作用,如何存储数据")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[s._v("5个属性，都是对象的形式")]),s._v(" "),t("ol",[t("li",[s._v("state 存储状态值，以键值对的形式")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("state：{\n   name:'',\n   age:''\n}\n\n//增删state中的成员\nVue.set(state,'name','aiyouwei')\nVue.delete(state,'name')\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("getters 相当于计算属性，对状态值进行加工。第一个参数state，第二个参数getters，可以拿其他getters的值来用")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("getters:{\n   people(state,getters){\n      return state.name+state.age\n   }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("mutations 相当于方法，用来修改state中的属性。参数state,payload。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("mutations:{\n   edit(state,payload){\n      if(state.name == 'aiyouwei'){\n         return payload.height\n      }\n   }\n}\n\n触发：this.$store.commit('edit',{height:180})  \n或者：this.$store.commit({type:'edit'},payload:{height:180})\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("actions 执行异步操作的方法。但凡有涉及到异步的操作，都放到actions中，再去触发mutations方法修改state。第一个参数是上下文this对象，包含了store的五个属性，第二个参数是挂载参数值。\n不建议在actions中直接修改state的值，是为了保证数据的可追踪性。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("actions:{\n   aEdit(context,payload){\n        setTimeout(()=>{\n            context.commit('edit',payload)\n        },2000)\n    }\n}\n\n触发：this.$store.dispatch('aEdit',{age:18})  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ol",{attrs:{start:"5"}},[t("li",[s._v("modules 模块化管理。项目比较大，全局数据很多的时候使用。")])])]),s._v(" "),t("h3",{attrs:{id:"_4-vue的两大核心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue的两大核心"}},[s._v("#")]),s._v(" 4.\tVue的两大核心")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("组件化开发")])],1),s._v(" "),t("p",[s._v("每个组件都有自己的模版，初始数据，方法等等，阅读性和可复用性大大提升")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("数据驱动")])],1),s._v(" "),t("p",[s._v("就是数据的双向绑定，由数据变化来驱动视图变化")])]),s._v(" "),t("h3",{attrs:{id:"_32-组件传值-组件通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-组件传值-组件通信"}},[s._v("#")]),s._v(" 32.\t组件传值||组件通信")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("父子组件")]),s._v(" "),t("p",[s._v("子向父:"),t("br"),s._v("\nthis.$emit\nthis.$parent"),t("br"),s._v("\n父向子:"),t("br"),s._v("\nprops"),t("br"),s._v("\nthis.$children"),t("br"),s._v("\nthis.$refs")])]),s._v(" "),t("li",[t("p",[s._v("兄弟组件")]),s._v(" "),t("p",[s._v("通过父组件来传值"),t("br"),s._v("\nvuex"),t("br"),s._v("\neventBus")])]),s._v(" "),t("li",[t("p",[s._v("跨辈组件\nprovide和inject"),t("br"),s._v("\n$root根实例"),t("br"),s._v("\n$attrs和$listerners"),t("br"),s._v("\n$attrs包含了父组件在当前组件上绑定的自定义属性(除了props里面使用的属性)"),t("br"),s._v("\n$listerners包含了当前组件上在父组件上监听的自定义事件(除了有.native修饰符的事件)"),t("br"),s._v("\n组件编译之后会把非 props 属性当成原始属性对待，从而添加到DOM元素（HTML标签上。如果想去掉HTML标签中 name 的属性，以至于该属性不暴露出来，我们可以借助 inheritAttrs:false 属性来完成。"),t("br"),s._v("\n通过子组件向下传递，两个属性均写在子组件对孙子组件的引用上。"),t("br"),s._v(" "),t("a",{attrs:{href:"https://www.cnblogs.com/lsboom/p/11365293.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("理解"),t("OutboundLink")],1),t("br"),s._v(" "),t("a",{attrs:{href:"https://www.codercto.com/a/62224.htm",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue组件数据通讯新姿势：$attrs 和 $listeners"),t("OutboundLink")],1)])])])]),s._v(" "),t("h3",{attrs:{id:"_33-路由传值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33-路由传值"}},[s._v("#")]),s._v(" 33.\t路由传值")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1. this.$router.push('/detail?name=\"aiyouwei\"') \n2. this.$router.push({\n      path: '/detail',\n      query:{\n         name: \"aiyouwei\"\n      }\n   })   \n   query传值参数会出现在url中，类似于get请求  \n   this.$route.query.name  \n3. this.$router.push({\n      name: 'detail',\n      params:{\n         name: \"aiyouwei\"\n      }\n   })  \n   params传值参数不会出现在url中，类似于post请求  \n   this.$route.params.name(动态传值也用这个方法)  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"_5-前端性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-前端性能优化"}},[s._v("#")]),s._v(" 5.\t前端性能优化")]),s._v(" "),t("p",[s._v("(路由、图片懒加载，组件按需引入，图片压缩转码，文件压缩，提前请求，功能封装，精简代码删除注释)")]),s._v(" "),t("ol",[t("li",[s._v("放在head标签中的JS和CSS文件会堵塞渲染，所以要将JS文件放在底部，CSS文件放在头部是因为如果先加载了HTML，没有样式，那么页面会很丑，用户体验就不好了。JS也可以放在头部，只要给script标签加上defer就可以了。")]),s._v(" "),t("li",[s._v("使用字体图标代替图片。")]),s._v(" "),t("li",[s._v("减少http请求。一个请求包含了DNS查找、tcp握手、发出请求、服务器接受并响应处理等，多一个请求就多了这些步骤，很消耗性能。")]),s._v(" "),t("li",[s._v("静态资源使用CDN。")]),s._v(" "),t("li",[s._v("减少重绘重排。操作DOM时，可以先将DOM暂时脱离文档流，操作完成再放回来。")]),s._v(" "),t("li",[s._v("图片懒加载："),t("a",{attrs:{href:"https://blog.csdn.net/w1418899532/article/details/90515969",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1),s._v(" "),t("ol",[t("li",[s._v("先给图片的src属性一个很小的默认等待图，再将真实图片地址放在自定义属性里。")]),s._v(" "),t("li",[s._v("判断【图片距离浏览器顶部】与【浏览器视口高度+浏览器滚动区域高度之和】的差值。为负说明图片出现在可视区域了，需要加载。")]),s._v(" "),t("li",[s._v("获取并赋值。")])])])]),s._v(" "),t("h3",{attrs:{id:"_6-mvc和mvvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-mvc和mvvm"}},[s._v("#")]),s._v(" 6.\tmvc和mvvm")]),s._v(" "),t("p",[s._v("（mvc是后端的一种开发模式,model中处理数据的增删改查，view用于展示页面，contorller用来实现复杂的逻辑处理。mvvm是前端的开发模式，每一个页面都可以看作是一个mvvm，vm是连接m和v的桥梁，因为vm提供了数据双向绑定）")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("mvc")]),t("br"),s._v("\nmodel->模型，对数据库进行操作"),t("br"),s._v("\ncontroller->控制器，链接model和view，处理逻辑，即JS"),t("br"),s._v("\nview->视图层，即html")],1),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("mvvm")]),t("br"),s._v("\n它实现了view和model的自动同步，当model改变时，我们不必再手动操作dom，它们会同时发生改变"),t("br"),s._v("\nmodel->模型，即我们的数据data"),t("br"),s._v("\nviewmodel->视图模型，实现数据双向绑定"),t("br"),s._v("\nview->视图层，即html")],1)]),s._v(" "),t("h3",{attrs:{id:"_7-this-nexttick"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-this-nexttick"}},[s._v("#")]),s._v(" 7.\tthis.$nextTick")]),s._v(" "),t("p",[s._v("（因为vue的dom更新是异步渲染的，这个方法的回调可以确保在前面的dom异步渲染完成之后才调用）\n"),t("strong",[s._v("tips:")]),t("br"),s._v("\nthis.$nextTick会等同一个作用域下的所有同步代码执行完毕才执行，不会等待异步代码")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  data() {\n    return {\n      price: 10,\n    };\n  },\n  methods: {\n    add() {\n      this.price++;\n      this.$nextTick(() => {\n        console.log(this.price);             //1200\n      });\n      this.price ++;\n      setTimeout(() => {\n        this.price++;\n        console.log(this.price);             //1201\n      }, 2000);\n      this.price = this.price + '00'\n    },\n  },\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("h3",{attrs:{id:"_8-对vue响应式理解-vue是如何实现数据双向绑定的-vue的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-对vue响应式理解-vue是如何实现数据双向绑定的-vue的优点"}},[s._v("#")]),s._v(" 8.\t对vue响应式理解  vue是如何实现数据双向绑定的  vue的优点")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("我们在使用以前框架的时候，先得操作JS修改数据，然后再操作DOM改变视图，遇到复杂的页面更为麻烦，写的80%的代码都是跟核心业务逻辑无关的。"),t("br"),s._v("\n现在vue帮我们把这些都处理好了，我们之用专注于组件和数据之间的关系，修改视图数据会发生变化，修改数据视图会发生变化。更简单，更靠谱，更方便~")])]),s._v(" "),t("li",[t("p",[s._v("遍历data中的所有属性"),t("br"),s._v("\n利用Obiect.defineproperty给所有的属性设置getter和setter"),t("br"),s._v("\n每个组件都有自己的watcher实例，会在渲染过程中将所有属性记录为依赖"),t("br"),s._v("\n当依赖项的setter变化时，会通知watcher重新计算，从而使它关联的组件得到更新")]),s._v(" "),t("p",[s._v("高阶回答：\n"),t("img",{attrs:{src:"/assets/img/interview3.png",width:"300",height:"auto",align:"middle"}}),t("br"),s._v(" "),t("img",{attrs:{src:"/assets/img/interview4.png",width:"300",height:"auto",align:"middle"}})])])]),s._v(" "),t("h3",{attrs:{id:"_9-如何拓展一个vue组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何拓展一个vue组件"}},[s._v("#")]),s._v(" 9.\t如何拓展一个Vue组件")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("ol",[t("li",[s._v("使用mixins混入")]),s._v(" "),t("li",[s._v("使用extends拓展")]),s._v(" "),t("li",[s._v("使用slot插槽")])])]),s._v(" "),t("h3",{attrs:{id:"_10-vue删除一个数组元素或者对象属性-原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-vue删除一个数组元素或者对象属性-原因"}},[s._v("#")]),s._v(" 10.\tVUE删除一个数组元素或者对象属性，原因？")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("obj:{name:'哎呦喂'}\n\nvue.delete(this.obj,'name')   //vue删除方式  这种方式会真正的删除数组或者对象的属性\ndelete this.obj.name          //js删除方式   这种方式会让数组或者对象的属性变成empty/undefined，数组的长度，对象的键值还是没变\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"_11-事件总线eventbus的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-事件总线eventbus的原理"}},[s._v("#")]),s._v(" 11.\t事件总线eventBus的原理")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/6bbf9c3364a3",target:"_blank",rel:"noopener noreferrer"}},[s._v("阐述以及注意事项"),t("OutboundLink")],1),t("br"),s._v("\n在this.$emit的时候，必须已经有$on，否则无法监听到。所以我们需要在需要传值的页面的destoryed中触发$emit，在接收值页面的created中$on")]),s._v(" "),t("h3",{attrs:{id:"_12-webpack打包步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-webpack打包步骤"}},[s._v("#")]),s._v(" 12.\twebpack打包步骤")]),s._v(" "),t("p",[s._v("（初始化项目npm init 打包webpack ）")]),s._v(" "),t("h3",{attrs:{id:"_13-vue-config-js配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-vue-config-js配置"}},[s._v("#")]),s._v(" 13.\tvue.config.js配置")]),s._v(" "),t("p",[s._v("（）")]),s._v(" "),t("h3",{attrs:{id:"_14-scoped实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-scoped实现原理"}},[s._v("#")]),s._v(" 14.\tscoped实现原理")]),s._v(" "),t("p",[s._v("（通过该属性可以实现组件间的样式独立，原理是postcss的转译，会给每一个组件中的dom动态添加一个唯一的属性，并在css选择器中选中）")]),s._v(" "),t("h3",{attrs:{id:"_15-uni-app环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-uni-app环境变量"}},[s._v("#")]),s._v(" 15.\tUni-app环境变量")]),s._v(" "),t("h3",{attrs:{id:"_16-vue是如何渲染dom的-render函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-vue是如何渲染dom的-render函数"}},[s._v("#")]),s._v(" 16.\tVue是如何渲染DOM的（Render函数）")]),s._v(" "),t("h3",{attrs:{id:"_17-vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-vue"}},[s._v("#")]),s._v(" 17.  vue")]),s._v(" "),t("h3",{attrs:{id:"_18-vue2的数组更新存在什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-vue2的数组更新存在什么问题"}},[s._v("#")]),s._v(" 18.  vue2的数组更新存在什么问题")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000038142224",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("vue2不能监听对象属性的添加和删除，但是defineproperty是可以的，作者之所以没有这么做是因为性能问题")]),s._v(" "),t("p",[s._v("以下两种方法会导致变动不是响应式的")]),s._v(" "),t("ol",[t("li",[s._v("当我们利用索引去更新数组元素时")]),s._v(" "),t("li",[s._v("直接修改数组长度的时候")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("arr:[1,2,3,4]\n\nthis.arr[4] = 5;       //非响应式\nthis.arr.length = 5    //非响应式\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("如何才能让它是响应式的")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1. this.$set or vue.set;\n2. this.arr.splice(4,0,5);\n3. this.arr[4] = 5;\n   this.$forceUpdate;\n4. 使用map、filter等方法重新生成一个数组并赋值原数组;\n   this.arr = this.arr.map(()=>);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"_19-vue2和vue3有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-vue2和vue3有什么区别"}},[s._v("#")]),s._v(" 19.  vue2和vue3有什么区别")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("  - vue3支持vue2的大多数特性\n  - vue3更好的支持ts\n  - Vue3使用Proxy和flact代替了vue2的defineproperty来实现数据代理\n  - 新的脚手架工具vite\n  - 重写了虚拟DOM 更快了\n")])])]),t("h3",{attrs:{id:"_20-token如何处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-token如何处理"}},[s._v("#")]),s._v(" 20.  token如何处理")]),s._v(" "),t("p",[s._v("在axios请求的响应拦截中，在每次请求的请求头中加入token")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("config=>{\n   const token = ''; // 服务端拿的 token 可以从 vuex、localStorage 等地方取\n\n   config.headers['authorization'] = `Bearer ${token}`\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"_21-作用域插槽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-作用域插槽"}},[s._v("#")]),s._v(" 21.  作用域插槽")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[s._v("作用域插槽就是带数据的插槽")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//子组件\n<div class=\"child\">\n   <h3>我是子组件</h3>\n   <slot :data='data'>\n</div>\n\n\ndata(){\n   return{\n      data:['one','two','three','four']\n   }\n}\n\n\n//父组件\n<Child>\n   <template slot-scope='user'>        //插槽必须放在template标签内 slot-scope后面的名字自定义\n      <span v-for='item in user.data' :key='user.data'>{{item}}</span>\n   </template>\n</Child>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"_22-单页面应用-和-多页面应用的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-单页面应用-和-多页面应用的区别"}},[s._v("#")]),s._v(" 22.  单页面应用 和 多页面应用的区别")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("单页面应用")])],1),s._v(" "),t("ol",[t("li",[s._v("初次加载损耗大，但是切换流畅，只需要加载局部资源")]),s._v(" "),t("li",[s._v("不利于seo检索，需要做SSR。因为搜索引擎只认识html里的内容，不认识js的内容，而单页应用的内容都是靠js渲染生成出来的，搜索引擎不识别这部分内容，也就不会给一个好的排名")])]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("多页面应用")])],1),s._v(" "),t("ol",[t("li",[s._v("跳转重新发起请求，然后加载所有的资源，用户体验不够好。但是首屏加载快")])]),s._v(" "),t("img",{attrs:{src:"/assets/img/vue/vue1.jpg",width:"600",height:"auto",align:"middle"}})]),s._v(" "),t("h3",{attrs:{id:"_23-数据双向绑定是如何实现的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-数据双向绑定是如何实现的"}},[s._v("#")]),s._v(" 23.  数据双向绑定是如何实现的")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[s._v("数据发生变化后，会重新对页面渲染，这就是Vue响应式")]),s._v(" "),t("p",[s._v("想完成这个过程，我们需要：")]),s._v(" "),t("p",[s._v("侦测数据的变化\n收集视图依赖了哪些数据\n数据变化时，自动“通知”需要更新的视图部分，并进行更新\n对应专业俗语分别是：")]),s._v(" "),t("p",[s._v("数据劫持 / 数据代理\n依赖收集\n发布订阅模式")]),s._v(" "),t("p",[s._v("也就是说：Vue 响应式核心就是，getter 的时候会收集依赖，setter 的时候会触发依赖更新")]),s._v(" "),t("p",[s._v("vue将遍历data中对象的所有property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。")]),s._v(" "),t("p",[s._v("这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。")]),s._v(" "),t("p",[s._v("每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。")]),s._v(" "),t("p",[s._v("getter 的时候我们会收集依赖，依赖收集就是订阅数据变化watcher的收集，依赖收集的目的是当响应式数据发生变化时，能够通知相应的订阅者去处理相关的逻辑。")]),s._v(" "),t("p",[s._v("setter 的时候会触发依赖更新，之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。")]),s._v(" "),t("p",[s._v("总结：")]),s._v(" "),t("p",[s._v("1）原理：")]),s._v(" "),t("p",[s._v("当创建 Vue 实例时,vue 会遍历 data 选项的属性,利用 Object.defineProperty 为属性添加 getter 和 setter 对数据的读取进行劫持（getter 用来依赖收集,setter 用来派发更新）,并且在内部追踪依赖,在属性被访问和修改时通知变化。")]),s._v(" "),t("p",[s._v("每个组件实例会有相应的 watcher 实例,会在组件渲染的过程中记录依赖的所有数据属性（进行依赖收集,还有 computed watcher,user watcher 实例）,之后依赖项被改动时,setter 方法会通知依赖与此 data 的 watcher 实例重新计算（派发更新）,")]),s._v(" "),t("p",[s._v("从而使它关联的组件重新渲染。")]),s._v(" "),t("p",[s._v("2）实现过程：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("我们已经知道实现数据的双向绑定，首先要对数据进行劫持监听，所以我们需要设置一个监听器Observer，用来监听所有属性。如果属性发上变化了，就需要告诉订阅者Watcher看是否需要更新。\n")])])]),t("p",[s._v("因为订阅者是有很多个，所以我们需要有一个消息订阅器Dep来专门收集这些订阅者，然后在监听器Observer和订阅者Watcher之间进行统一管理的。接着，我们还需要有一个指令解析器Compile，对每个节点元素进行扫描和解析，")]),s._v(" "),t("p",[s._v("将相关指令对应初始化成一个订阅者Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者Watcher接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。因此接下去我们执行以下3个步骤，实现数据的双向绑定：")]),s._v(" "),t("p",[s._v("1.实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。")]),s._v(" "),t("p",[s._v("2.实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。")]),s._v(" "),t("p",[s._v("3.实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器")])]),s._v(" "),t("h3",{attrs:{id:"_24-如何为一个对象添加多个属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-如何为一个对象添加多个属性"}},[s._v("#")]),s._v(" 24.  如何为一个对象添加多个属性")]),s._v(" "),t("p",[s._v("添加一个属性： this.$set(this.obj,'name',value)"),t("br"),s._v("\n添加多个属性： this.obj =  Object.assign({},this.obj,{a:1,b:2}) 将要添加的属性与原对象通过assign混合成一个新的对象")]),s._v(" "),t("h3",{attrs:{id:"_25-vue的生命周期以及每个周期都发生了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-vue的生命周期以及每个周期都发生了什么"}},[s._v("#")]),s._v(" 25.  vue的生命周期以及每个周期都发生了什么")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV1kr4y117yr/?spm_id_from=333.788.recommend_more_video.1",target:"_blank",rel:"noopener noreferrer"}},[s._v("完美回答"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("生命周期就是vue实例从创建到销毁的一个过程，即从创建、初始化数据、编译模板、挂载渲染、更新、销毁的一系列过程。"),t("br"),s._v("\n主要分为8个阶段：创建前后、挂载前后、更新前后、销毁前后")]),s._v(" "),t("img",{attrs:{src:"/assets/img/interview5.jpg",width:"500",height:"auto",align:"middle"}}),s._v(" "),t("ol",[t("li",[s._v("beforeCreate")])]),s._v(" "),t("p",[s._v("在实例初始化之前，数据观测和事件配置都还未执行时调用,用此时data和methods还没初始化完成。this.$el,this.$data,this.$methods都无法访问")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("created")])]),s._v(" "),t("p",[s._v("组件实例已经创建完成，data和methods初始化完成，已经可以对data、methods进行操作了，但是dom和el属性还不存在。vue【开始】编译模板，生成一个虚拟dom。\n在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data 数据的初始化，el还没有配置完成。")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("beforeMount")])]),s._v(" "),t("p",[s._v("对代码中的vue指令和模版进行解析，生成虚拟DOM，但还未挂载到页面中")]),s._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[s._v("mounted")])]),s._v(" "),t("p",[s._v("模版已经渲染完毕，可以对dom进行操作了")]),s._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[s._v("beforeUpdate")])]),s._v(" "),t("p",[s._v("发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子中进一步地更改状态，不会触发附加地重渲染过程。"),t("br"),s._v("\ndata中的数据已经更新，但是dom中的数据还没改变")]),s._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[s._v("updated")])]),s._v(" "),t("p",[s._v("页面和data中的数据同步")]),s._v(" "),t("ol",{attrs:{start:"7"}},[t("li",[s._v("beforeDestory")])]),s._v(" "),t("p",[s._v("实例中的所有指令、数据、方法还处于可用状态")]),s._v(" "),t("ol",{attrs:{start:"8"}},[t("li",[s._v("destoryed")])]),s._v(" "),t("p",[s._v("组件被完全销毁，都不可用")]),s._v(" "),t("ol",{attrs:{start:"9"}},[t("li",[t("p",[s._v("activated")])]),s._v(" "),t("li",[t("p",[s._v("deactivated")])])])]),s._v(" "),t("h3",{attrs:{id:"_34-vue-的父组件和子组件生命周期钩子执行顺序是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34-vue-的父组件和子组件生命周期钩子执行顺序是什么"}},[s._v("#")]),s._v(" 34.  Vue 的⽗组件和⼦组件⽣命周期钩⼦执⾏顺序是什么")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/a08e8ce730ce",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"_26-v-if-和-v-show-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-v-if-和-v-show-区别"}},[s._v("#")]),s._v(" 26.  v-if 和 v-show 区别")]),s._v(" "),t("p",[s._v("v-show 相当于控制css的display:none OR block；不论条件是否成立标签都会被渲染；频繁切换的时候使用；\n而v-if是根据条件渲染或者删除标签，而且是惰性的，初始条件不成立的时候就不会渲染；")]),s._v(" "),t("h3",{attrs:{id:"_27-vue中key的作用-虚拟-dom-的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-vue中key的作用-虚拟-dom-的优缺点"}},[s._v("#")]),s._v(" 27.  vue中key的作用&&虚拟 DOM 的优缺点？")]),s._v(" "),t("p",[t("strong",[s._v("虚拟dom")]),t("br"),s._v("\nJS操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程。如果要更新10个节点，浏览器会执行10次。")]),s._v(" "),t("p",[s._v("虚拟dom使用js对象将dom树转换成了一个对象树，放在浏览器内存中。当我们需要变更的时候，找出新旧节点之间的差异，然后对差异进行打补丁")]),s._v(" "),t("p",[s._v("新旧节点如果不相似，直接根据新节点创建dom；\n如果相似，先是对data比较，包括class、style、event、props、attrs等，有不同就调用对应的update函数，然后是对子节点的比较，子节点的比较用到了diff算法")]),s._v(" "),t("p",[s._v("diff算法对新旧dom进行逐层比较，删除，创建。再反应到实际的dom中，减少了dom操作。但是如果有很多相同的元素，可能会浪费性能，所以引入了key进行区分")]),s._v(" "),t("p",[s._v("优点：避免了直接操作dom,提高了工作效率和性能。"),t("br"),s._v("\n缺点：首次渲染比较慢。")]),s._v(" "),t("p",[s._v("想要知道key的作用，就必须先了解一下diff算法:")]),s._v(" "),t("ol",[t("li",[s._v("Vue中的数据发生变化的时候，只会比较同一层级的节点"),t("br"),s._v("\n如果节点不同，则之间干掉前面的节点，在创建并插入新的节点，不会再比较下一层的子节点了"),t("br"),s._v("\n如果节点相同，则会重新设置该节点的属性，来实现节点的更新")]),s._v(" "),t("li",[s._v("当我们渲染一个例如v-for的列表时，想要往已经生成的队列中插入一条数据：\n如果我们加了key唯一标识，vue就可以更加准确的知道应该往哪里插入新的节点，否则只能从变化的地方开始挨个更改，性能就会不太好")])]),s._v(" "),t("h3",{attrs:{id:"_28-vue-router中导航守卫有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-vue-router中导航守卫有哪些"}},[s._v("#")]),s._v(" 28.  vue-router中导航守卫有哪些")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("ol",[t("li",[s._v("全局前置守卫      beforeEach")]),s._v(" "),t("li",[s._v("全局后置守卫      afterEach")]),s._v(" "),t("li",[s._v("路由内独享守卫    beforeEnter")]),s._v(" "),t("li",[s._v("组件内的守卫      beofreRouteEnter\nbeofreRouteUpdate\nbeofreRouteLeave")]),s._v(" "),t("li",[s._v("全局解析守卫      beforeResolve")])])]),s._v(" "),t("h3",{attrs:{id:"_29-vue与react的选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-vue与react的选择"}},[s._v("#")]),s._v(" 29.  vue与react的选择")]),s._v(" "),t("h3",{attrs:{id:"_30-v-if和v-for为什么不能一起用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-v-if和v-for为什么不能一起用"}},[s._v("#")]),s._v(" 30.  v-if和v-for为什么不能一起用")]),s._v(" "),t("h3",{attrs:{id:"_31-vue项目优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-vue项目优化"}},[s._v("#")]),s._v(" 31.  vue项目优化")]),s._v(" "),t("ol",[t("li",[s._v("只有在页面中需要响应式显示的数据，再放到data中，否则每个数据都要经过defineproperty，很浪费性能。\n如果说某个对象数据我们只用到一次，我们用到Object.freeze()冻结这个对象，就不会被defineproperty处理。"),t("br"),s._v("\n虽然不能改变值的内容，但是可以改变对象的引用")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("new Vue({\n    data: {\n             // vue不会对list里的object做getter、setter绑定\n             list: Object.freeze([\n                    { value: 1 },\n                    { value: 2 }\n             ])\n    },\n    created () {\n             // 界面不会有响应\n             this.list[0].value = 100;\n\n             // 下面两种做法，界面都会响应\n             this.list = [\n                 { value: 100 },\n                 { value: 200 }\n             ];\n             this.list = Object.freeze([\n                 { value: 100 },\n                 { value: 200 }\n             ]);\n    }\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("路由懒加载，对需要频繁访问的组件进行keep-alive持久化，并对数量进行限制（exclude,include,max）")]),s._v(" "),t("li",[s._v("开启gzip压缩\n注意事项：版本不能过高，网友推荐1.1.2"),t("br"),s._v(" "),t("code",[s._v("npm install --save-dev compression-webpack-plugin@1.1.2")]),s._v(" "),t("a",{attrs:{href:"https://blog.csdn.net/u013611033/article/details/104953615",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考地址"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("通过cdn引入外部资源，减少打包体积"),t("br"),s._v("\n我们在项目里面通常会引入很多外部插件，在打包的时候不需要将它们打包进去，甚至vue,vuex这些。\n"),t("ol",[t("li",[s._v("将它们以cdn的方式写进public/index.html里面。"),t("br"),s._v(" "),t("a",{attrs:{href:"https://www.bootcdn.cn/",target:"_blank",rel:"noopener noreferrer"}},[s._v("cdn地址查询"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("在vue.config.js中，将这些文件剔除")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("module.exports = {\n   //找到正确的文件路径\n   publicPath: './',\n   configureWebpack: {\n      externals: {\n         //键为引入的时候from的值，键值为该键全局变量的名字\n         'vue': 'Vue',\n         'vue-router': 'VueRouter',\n         'vuex': 'Vuex',\n         'element-ui': 'ELEMENT',\n         'axios': 'axios',\n      }\n   }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])])])]),s._v(" "),t("h3",{attrs:{id:"_35-vue的虚拟dom、render函数是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35-vue的虚拟dom、render函数是什么"}},[s._v("#")]),s._v(" 35.  vue的虚拟DOM、Render函数是什么")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("虚拟DOM")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1876067",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1)]),s._v(" "),t("blockquote",[t("p",[s._v("简单点，就是一个普通的 JavaScript 对象，包含了 tag、props、children 三个属性")])]),s._v(" "),t("p",[s._v("渲染真实DOM的开销是很大的，比如有时候我们修改了某个数据，如果直接渲染到真实dom上会引起整个dom树的重绘和重排。"),t("br"),s._v("\nJS的运行速度是非常快的，所以我们可以通过JS计算出发生变更的具体节点进行操作，达到渲染的最快值。"),t("br"),s._v("\nvue 在 虚拟 dom 这一块，是参照了 snabbdom.js 然后在上面进行了部分的修改的。"),t("br"),s._v("\n下面用虚拟DOM描述一段HTML结构。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('   <div id="app" class="container">\n     <h1>虚拟DOM</h1>\n     <ul style="color:red">\n         <li>第一项</li>\n         <li>第二项</li>\n         <li>第三项</li>\n     </ul>\n   </div>\n\n   //虚拟DOM\n   {\n      tag: \'div\',\n      props: {\n         id: "app",\n         class: "container"\n      },\n      children: [\n         {\n            tag: \'h1\',\n            children: \'虚拟DOM\' //文本也是子节点\n         },\n         {\n            tag: \'ul\',\n            children: [...]\n         }\n      ]\n   }\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("Render函数")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV1364y1F7H4/?spm_id_from=333.788.recommend_more_video.0",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考视频"),t("OutboundLink")],1)]),s._v(" "),t("blockquote",[t("ol",[t("li",[s._v("我们一般写组件是将页面结构写在"),void 0,s._v("标签里面，而Render函数则是通过函数的方式构造页面。")],2),s._v(" "),t("li",[s._v("我们写在"),void 0,s._v("标签里面结构最终也会被编译为Render函数。")],2),s._v(" "),t("li",[s._v("作用是动态创建元素或者写源码的时候会用到。")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  //一般\n   <template>\n      <ul>\n         <li class='list' onClick='console.log('')'></li>\n      </ul> \n   </template>\n\n  //Render函数\n   export default{\n      data() {\n         return {\n            list: [1,2,3]\n         }\n      },\n      render(creatElement) {\n         //三个参数：元素标签、标签信息、子元素信息\n         //注意必须要return\n         return creatElement(\n            'ul', \n            {}, \n            this.list.map(n => creatElement(\n               'li', \n               { attrs:{ class: 'list',on: () => {console.log('') }}}, \n               我们第n个子元素\n               )\n            )\n         );\n      }\n   }\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"_36-diff算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36-diff算法"}},[s._v("#")]),s._v(" 36.  diff算法")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("diff算法")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/wind-lanyan/p/9061684.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("图文并茂"),t("OutboundLink")],1),t("br"),s._v(" "),t("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1876067",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1),t("br"),s._v(" "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1b5411V7i3/?spm_id_from=trigger_reload",target:"_blank",rel:"noopener noreferrer"}},[s._v("【李发亮】图解 Vue.js Virtual DOM 的 Diff 算法核心"),t("OutboundLink")],1),t("br"),s._v(" "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1dV411a7mT?p=3",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考视频"),t("OutboundLink")],1)]),s._v(" "),t("blockquote",[t("p",[s._v("虚拟DOM的核心。我们会用虚拟DOM计算出最小的变化，根据变化去更新真实DOM，来达到性能的最大化。")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("patch函数")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("  页面首次更新和数据更新时触发。  \n  首次更新时，会创建一个新的vnode，更新到关联到的DOM元素上。  \n  页面更新时，会用新的vnode替换掉老的vnode。  \n  逻辑：  \n  1. 判断第一个参数是不是vnode，不是说明是第一次执行，创建vnode并关联DOM。   \n  2. 判断oldVnode和vnode的tag、key、是否为注释节点等信息是否相同。  \n     如果相同，说明是同一个元素，执行patchVnode函数做进一步比较。  \n     如果不同，则创建一个新的DOM元素，插入到页面，并删除旧的vnode。  \n  ```\n     function patch (oldVnode, vnode) {\n        // some code\n        if (sameVnode(oldVnode, vnode)) {\n           patchVnode(oldVnode, vnode)\n        } else {\n           const oEl = oldVnode.el // 当前oldVnode对应的真实元素节点\n           let parentEle = api.parentNode(oEl)  // 父元素\n           createEle(vnode)  // 根据Vnode生成新元素\n           if (parentEle !== null) {\n                 api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl)) // 将新元素添加进父元素\n                 api.removeChild(parentEle, oldVnode.el)  // 移除以前的旧元素节点\n                 oldVnode = null\n           }\n        }\n        // some code \n        return vnode\n     }\n\n     function sameVnode (a, b) {\n        return (\n           a.key === b.key &&  // key值\n           a.tag === b.tag &&  // 标签名\n           a.isComment === b.isComment &&  // 是否为注释节点\n           // 是否都定义了data，data包含一些具体信息，例如onclick , style\n           isDef(a.data) === isDef(b.data) &&  \n           sameInputType(a, b) // 当标签是<input>的时候，type必须相同\n        )\n     }\n  ```  \n")])])])])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("patchVnode函数")]),s._v(" "),t("p",[s._v("逻辑：")]),s._v(" "),t("ol",[t("li",[s._v("判断oldVnode和vnode是否指向同一个对象，是则直接return")]),s._v(" "),t("li",[s._v("如果他们都有文本节点且不相等，则将DOM的文本设置为vnode的文本")]),s._v(" "),t("li",[s._v("如果oldVnode有子节点而Vnode没有，则删除el的子节点")]),s._v(" "),t("li",[s._v("如果oldVnode没有子节点而Vnode有，则将Vnode的子节点真实化之后添加到el")]),s._v(" "),t("li",[s._v("如果两者都有子节点，则执行updateChildren函数比较子节点，也就是我们的diff算法执行的地方")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  patchVnode (oldVnode, vnode) {\n      const el = vnode.el = oldVnode.el\n      let i, oldCh = oldVnode.children, ch = vnode.children\n      if (oldVnode === vnode) return\n      if (oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text) {\n         api.setTextContent(el, vnode.text)\n      }else {\n         updateEle(el, vnode, oldVnode)\n         if (oldCh && ch && oldCh !== ch) {\n               updateChildren(el, oldCh, ch)\n         }else if (ch){\n               createEle(vnode) //create el's children dom\n         }else if (oldCh){\n               api.removeChildren(el)\n         }\n      }\n   }\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("updateChildren")]),s._v(" "),t("p",[s._v("逻辑：")]),s._v(" "),t("ol",[t("li",[s._v("现将新老vnode的子节点提取出来")]),s._v(" "),t("li",[s._v("出现4个指针，分别指向新老vnode的头尾变量，他们会进行两两比较，没有匹配成功则会遍历oldVnode的key，使用新vnode的头变量key进行比较，有就更新或者移动，没有就创建。一旦某个vnode的StartIndex>EndIndex，说明遍历完毕")]),s._v(" "),t("li",[s._v("oldVnode先遍历完毕，说明新增了节点。将多余的vnode子节点按照他们的index插入到DOM中")]),s._v(" "),t("li",[s._v("vnode先遍历完毕，说明删除了节点。在真实DOM中将多余的节点删除")])])]),s._v(" "),t("h3",{attrs:{id:"_37-我们为什么会用到路由懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37-我们为什么会用到路由懒加载"}},[s._v("#")]),s._v(" 37.   我们为什么会用到路由懒加载")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV1wC4y1t7b8/?spm_id_from=333.788.recommend_more_video.0",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考视频：JS++小野老师"),t("OutboundLink")],1),t("br"),s._v("\n如果不使用路由懒加载，我们在首屏渲染的时候，就会加载所有的路由文件，导致页面加载时间过长。"),t("br"),s._v("\n使用之后就可以在点击路由之后再去加载对应的JS文件。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   {\n      path: '/',\n      name: 'home',\n      //第一种 webpackChunkName是加载文件时显示的文件名称，没写就是从0开始命名。没有指定webpackChunkName，每个组件打包成一个js文件。指定了相同的webpackChunkName，会合并打包成一个js文件。\n      component: () => import(/*webpackChunkName: 'home' */ '../views/About.vue')\n      //第二种 异步加载\n      component: resolve => (require ([\"@/components/HelloWorld\"],resolve))\n   }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"_38-动态组件中的activated与deactivated钩子函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_38-动态组件中的activated与deactivated钩子函数"}},[s._v("#")]),s._v(" 38.   动态组件中的activated与deactivated钩子函数")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/7005926039171891207",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考文章"),t("OutboundLink")],1),t("br"),s._v("\n这两个钩子函数是动态组件被"),t("keep-alive"),s._v("包裹时，组件被激活和被缓存的时候调用的")],1),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   {\n      path: '/',\n      name: 'home',\n      //第一种 webpackChunkName是加载文件时显示的文件名称，没写就是从0开始命名。没有指定webpackChunkName，每个组件打包成一个js文件。指定了相同的webpackChunkName，会合并打包成一个js文件。\n      component: () => import(/*webpackChunkName: 'home' */ '../views/About.vue')\n      //第二种 异步加载\n      component: resolve => (require ([\"@/components/HelloWorld\"],resolve))\n   }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"_39-keep-alive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_39-keep-alive"}},[s._v("#")]),s._v(" 39.   keep-alive")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/4b55d312d297",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考文章"),t("OutboundLink")],1),t("br"),s._v(" "),t("a",{attrs:{href:"https://www.jianshu.com/p/0b0222954483",target:"_blank",rel:"noopener noreferrer"}},[s._v("前进刷新，后退不刷新"),t("OutboundLink")],1),t("br"),s._v(" "),t("a",{attrs:{href:"https://www.cnblogs.com/chanwahfung/p/13523396.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("源码解析"),t("OutboundLink")],1),t("br"),s._v("\nvue内置的一个组件，用来缓存不活动的组件状态，避免重新渲染，提高性能。被缓存的组件在切换时会触发activated、deactivated这两个生命周期钩子函数。")]),s._v(" "),t("p",[s._v("标签中的name属性对应的是每个组件配置中的name属性，而不是路由的name属性！")]),s._v(" "),t("ol",[t("li",[s._v("切换回来需要置顶怎么办？\n"),t("ol",[t("li",[s._v("Router方法中有一个scrollBehavior，接收to/form参数，可以利用这个做处理")]),s._v(" "),t("li",[s._v("可以在具体组件中的 activated中做处理")])])]),s._v(" "),t("li",[s._v("切换默认不支持二三级路由，应该怎么办？")]),s._v(" "),t("li",[s._v("切换回来没有默认请求，应该怎么办？\n"),t("ol",[t("li",[s._v("可以在具体组件中的 activated中做处理")]),s._v(" "),t("li",[s._v("利用include、exclude属性")])])])])]),s._v(" "),t("h3",{attrs:{id:"_40-在自定义组件中使用v-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_40-在自定义组件中使用v-model"}},[s._v("#")]),s._v(" 40.   在自定义组件中使用v-model")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/liub37/article/details/83382205",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考文章"),t("OutboundLink")],1)])]),s._v(" "),t("h2",{attrs:{id:"浏览器原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器原理"}},[s._v("#")]),s._v(" 浏览器原理")]),s._v(" "),t("h3",{attrs:{id:"从输入http到页面显示浏览器发生了啥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从输入http到页面显示浏览器发生了啥"}},[s._v("#")]),s._v(" "),t("strong",[s._v("从输入http到页面显示浏览器发生了啥")])]),s._v(" "),t("blockquote",[t("p",[s._v("输入的url经过DNS(分布式数据库，记录了域名和其IP地址的对应关系)解析之后得到服务器IP地址，接着向服务器发起请求，经过TCP三次握手确认连接后，浏览器得到资源开始构建DOM树，并最终渲染出来(一个完整的 HTTP 请求需要经历 DNS 查找，TCP 握手，浏览器发出 HTTP 请求，服务器接收请求，服务器处理请求并发回响应，浏览器接收响应等过程)"),t("br"),s._v("\n输入bilibili.com  DNS解析得到B站的IP地址。接着向B站发起获得首页内容的请求")])]),s._v(" "),t("ul",[t("li",[s._v("浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;")]),s._v(" "),t("li",[s._v("解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;")]),s._v(" "),t("li",[s._v("浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;")]),s._v(" "),t("li",[s._v("服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;")]),s._v(" "),t("li",[s._v("释放 TCP连接;")]),s._v(" "),t("li",[s._v("浏览器将该 html 文本并显示内容;")])]),s._v(" "),t("h3",{attrs:{id:"tcp三次握手的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手的过程"}},[s._v("#")]),s._v(" "),t("strong",[s._v("TCP三次握手的过程")])]),s._v(" "),t("ol",[t("li",[s._v("A确定B能接受信息")]),s._v(" "),t("li",[s._v("A确定B能发送信息")]),s._v(" "),t("li",[s._v("B确定A能接受信息")]),s._v(" "),t("li",[s._v("B确定A能发送信息")])]),s._v(" "),t("h3",{attrs:{id:"浏览器缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[s._v("#")]),s._v(" "),t("strong",[s._v("浏览器缓存")])]),s._v(" "),t("p",[s._v("浏览器缓存机制有四个方面，但我们最常用的是HTTP缓存。大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。")]),s._v(" "),t("p",[s._v("强缓存，协商缓存：共同点都是从浏览器读取资源，不同点强缓存不给服务器发请求，直接读；协商是发送，然后根据返回信息决定是否使用缓存")]),s._v(" "),t("p",[s._v("浏览器存在一个缓存数据库，用于储存一些不经常变化的静态文件（图片、css、js等）。缓存分为强制缓存和协商缓存。优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。"),t("br"),s._v(" "),t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("强制缓存")]),s._v("\n当缓存数据库中已有所请求的数据时。客户端直接从缓存数据库中获取数据。当缓存数据库中没有所请求的数据时，客户端的才会从服务端获取数据。"),t("br"),s._v("\n服务器觉得某个资源需要被缓存时，会在资源的响应头中设置Cache-Control的max-age。前端不需要作处理。")],1),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("协商缓存")]),s._v("\n又称对比缓存。首次请求会得到最新的资源和一个资源标识，存储到本地缓存。下次请求客户端会拿着缓存标识，去请求服务端验证是否失效（新鲜），如果没有失效服务端会返回304，此时客户端直接从缓存中获取所请求的数据，如果标识失效，服务端会返回200状态码和最新的资源。")],1),s._v(" "),t("h3",{attrs:{id:"cdn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cdn"}},[s._v("#")]),s._v(" "),t("strong",[s._v("CDN")])]),s._v(" "),t("h3",{attrs:{id:"http-和https的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-和https的区别"}},[s._v("#")]),s._v(" "),t("strong",[s._v("HTTP 和HTTPS的区别")])]),s._v(" "),t("p",[s._v("是客户端和服务器请求和接受数据的一个标准，规定客户端和服务端的数据传输格式。"),t("br"),s._v("\n默认端口是80。"),t("br"),s._v("\n基于TCP/IP的应用层协议，无状态。"),t("br"),s._v("\n一个HTTP请求报文包括请求行，请求头，空的一行，请求体。"),t("br"),s._v("\n客户端向服务器发起一个请求报文，包含请求的方法，协议版本，路径，请求头以及数据。服务端返回一个状态作为响应，响应内容包括协议版本，成功错误代码，服务器信息，响应头以及数据")]),s._v(" "),t("h3",{attrs:{id:"token被人恶意截取怎么办"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token被人恶意截取怎么办"}},[s._v("#")]),s._v(" "),t("strong",[s._v("token被人恶意截取怎么办")])]),s._v(" "),t("ol",[t("li",[s._v("在存储的时候把 token 进行对称加密存储，用时解开。")]),s._v(" "),t("li",[s._v("将请求 URL、时间戳、token 三者进行合并加盐签名，服务端校验有效性。")]),s._v(" "),t("li",[s._v("HTTPS 对 URL 进行判断。")])]),s._v(" "),t("h3",{attrs:{id:"常用的的请求头都有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用的的请求头都有哪些"}},[s._v("#")]),s._v(" "),t("strong",[s._v("常用的的请求头都有哪些")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式")])]),s._v(" "),t("li",[t("p",[s._v("application/x-www-form-urlencoded ： "),t("code",[s._v("<")]),s._v("form encType=””>中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）")])]),s._v(" "),t("li",[t("p",[s._v("application/json    ： JSON数据格式")])])]),s._v(" "),t("h3",{attrs:{id:"常用的的状态码都有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用的的状态码都有哪些"}},[s._v("#")]),s._v(" "),t("strong",[s._v("常用的的状态码都有哪些")])]),s._v(" "),t("h3",{attrs:{id:"与缓存相关的请求头有哪些-我们一般都缓存哪些文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与缓存相关的请求头有哪些-我们一般都缓存哪些文件"}},[s._v("#")]),s._v(" "),t("strong",[s._v("与缓存相关的请求头有哪些，我们一般都缓存哪些文件")])]),s._v(" "),t("h3",{attrs:{id:"什么是跨域-如何解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域-如何解决"}},[s._v("#")]),s._v(" "),t("strong",[s._v("什么是跨域，如何解决？")])]),s._v(" "),t("p",[s._v("说到跨域就得先了解同源策略")]),s._v(" "),t("blockquote",[t("p",[s._v("同源策略是浏览器的一个最核心也最基本的安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源"),t("br"),s._v("\n源（origin）就是协议、域名和端口号"),t("br"),s._v("\n即便两个不同的域名指向同一个IP地址，也非同源")])]),s._v(" "),t("p",[t("strong",[s._v("概念")])]),s._v(" "),t("img",{attrs:{src:"/assets/img/crossDomain.jpg",width:"500",height:"auto",align:"middle"}}),s._v(" "),t("p",[t("strong",[s._v("利用jsonp解决跨域")]),t("br"),s._v("\nHTML中有一些标签是可以跨域访问资源的,如link、img、src以及iframe等，jsonp就是利用了src的这一特性")]),s._v(" "),t("p",[s._v("在JS中提前定义好回调处理函数，后端将回调函数的调用，携带请求结果返回，我们就可以做相应的处理了。")]),s._v(" "),t("p",[s._v("利用jquery解决jsonp跨域非常的方便\n"),t("img",{attrs:{src:"/assets/img/jsonp.jpg",width:"500",height:"auto",align:"middle"}})]),s._v(" "),t("p",[t("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("需要服务的支持")]),s._v(" "),t("li",[s._v("只能发起GET请求")])]),s._v(" "),t("hr"),s._v(" "),t("p",[t("strong",[s._v("利用CORS解决跨域")]),t("br"),s._v("\n是后端人员在服务中设置允许跨域请求，前端人员不用做其他处理，如果需要携带cookie的话，则前后端都需要设置。是一种规范化的跨域请求解决方案，安全可靠。")]),s._v(" "),t("p",[t("strong",[s._v("优势")])]),s._v(" "),t("ul",[t("li",[s._v("在服务端进行控制是否允许跨域，可自定义规则")]),s._v(" "),t("li",[s._v("支持各种请求方式")])]),s._v(" "),t("p",[t("strong",[s._v("缺点")])]),s._v(" "),t("ul",[t("li",[s._v("会产生额外的请求")])]),s._v(" "),t("p",[t("strong",[s._v("proxy代理解决跨域")]),t("br"),s._v("\n通过中间件来实现,浏览器之间有跨域限制，但服务器之间没有，所以中间件就是服务器")]),s._v(" "),t("p",[t("strong",[s._v("缺点")])]),s._v(" "),t("ul",[t("li",[s._v("只能在生产环境中使用")])]),s._v(" "),t("h2",{attrs:{id:"js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[s._v("#")]),s._v(" JS")]),s._v(" "),t("h3",{attrs:{id:"_1-节流和防抖以及使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-节流和防抖以及使用场景"}},[s._v("#")]),s._v(" 1.\t节流和防抖以及使用场景")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV17b4y1X7yp/?spm_id_from=333.788.recommend_more_video.-1",target:"_blank",rel:"noopener noreferrer"}},[s._v("节流"),t("OutboundLink")],1),s._v(" ：事件触发一次之后设置时间间隔，这段时间内，不会开始下一次触发(在设置时间内，只会触发一次效果)。"),t("br"),s._v(" "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV17b4y1X7yp",target:"_blank",rel:"noopener noreferrer"}},[s._v("防抖"),t("OutboundLink")],1),s._v("：一段时间内点击多次，只执行最后一次。  （本质上就是以最后的操作为标准）")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    <button id=\"fangdou\">防抖按钮</button>\n    <button id=\"jieliu\">节流按钮</button>\n\n    <script>\n\n        //防抖\n        function cons() { console.log(this) }\n\n        function antiShake(fn, time) {\n            //利用闭包使得return出去的函数处理的都是同一个setTimeOut\n            let setTime;\n            return function () {\n               //保存this指向和参数\n               let context = this;\n               let arg = arguments;\n\n               clearTimeout(setTime)\n\n               setTime = setTimeout(function () {\n                  fn.apply(context, arg)\n               }, time) \n            }\n        }\n\n\n        fangdou.addEventListener('click', antiShake(cons, 2000))\n        //节流\n        function throttle(fn, time) {\n            let setTime;\n\n            return function () {\n                let context = this;\n                let arg = arguments;\n                if (setTime) {\n                    return\n                }\n                setTime = setTimeout(function () {\n                    fn.call(context,arg);\n                    setTime = null\n                }, time)\n            }\n        }\n\n        jieliu.addEventListener('click', throttle(cons, 2000))\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br")])]),t("h3",{attrs:{id:"_2-箭头函数和普通函数的差别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-箭头函数和普通函数的差别"}},[s._v("#")]),s._v(" 2.\t箭头函数和普通函数的差别")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("箭头函数")]),s._v("\n箭头函数是匿名函数，不能作为构造函数，单个表达式的时候可以省略大括号。"),t("br"),s._v("\n箭头函数没有arguments属性，取而代之用rest参数...解决。"),t("br"),s._v("\n箭头函数的 this 永远指向其上下文的  this ，任何方法都改变不了其指向，如 call、bind、apply，注意：this一旦被捕获，就不再发生变化"),t("br"),s._v("\n箭头函数没有原型属性"),t("br"),s._v(" "),t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("普通函数")]),t("br"),s._v("\n普通函数"),t("br"),s._v("\nthis指向调用它的那个对象，可以修改"),t("br"),s._v("\n可以用作构造函数，有原型"),t("br"),s._v("\n有arguments属性")],1),s._v(" "),t("h3",{attrs:{id:"_3-var-let-const的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-var-let-const的区别"}},[s._v("#")]),s._v(" 3.\tvar let const的区别")]),s._v(" "),t("p",[s._v("（let，const不存在变量提升）\nif语句和for循环中用var声明的变量，可以在外部访问的到，因为他们是块级作用域，不是函数作用域。")]),s._v(" "),t("ol",[t("li",[s._v("var、let、const都不能跨函数作用域访问")]),s._v(" "),t("li",[s._v("var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。")]),s._v(" "),t("li",[s._v("let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。"),t("br"),s._v("\nlet 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的")]),s._v(" "),t("li",[s._v("const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。"),t("br"),s._v("\nconst定义的并非不可变，他是定义了一个常量，如果赋值为对象或者数组，则保存的是对象、数组的引用地址，可以对对象数组的内容修改，但不能重新给这个常量赋值。")]),s._v(" "),t("li",[s._v("在相同的作用域或块级作用域中，不能使用 其他 关键字来重置 var、let、const 关键字声明的变量:")])]),s._v(" "),t("h3",{attrs:{id:"_4-es6数组新方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-es6数组新方法"}},[s._v("#")]),s._v(" 4.\tES6数组新方法")]),s._v(" "),t("p",[s._v("Array.find(),Array.findIndex()传入一个回调，返回以第一个匹配到的值或者下标"),t("br"),s._v("\nArray.fill(value,start,end)） 填充或者替换指定位置的元素"),t("br"),s._v("\nArray.form()                  将类数组对象转为真正的数组"),t("br"),s._v("\nArray.of()                    将一组值转为数组"),t("br"),s._v("\nArray.includes()              判断数组中是否包含某元素"),t("br"),s._v("\nArray.keys()                  返回键值对的key（下标）"),t("br"),s._v("\nArray.values()                返回键值对的value"),t("br"),s._v("\nArray.entries()               返回键值对"),t("br"),s._v("\nArray.copyWithin()            选择数组的某个下标，从该位置开始复制数组元素")]),s._v(" "),t("h3",{attrs:{id:"_5-高阶函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-高阶函数"}},[s._v("#")]),s._v(" 5.\t高阶函数")]),s._v(" "),t("p",[s._v("高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者是返回它们。")]),s._v(" "),t("p",[s._v("高阶函数是一个接收函数作为参数或将函数作为输出返回的函数。"),t("br"),s._v("\n例如Array.map，Array.filter 和 Array.reduce")]),s._v(" "),t("h3",{attrs:{id:"_6-图片上传"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-图片上传"}},[s._v("#")]),s._v(" 6.\t图片上传")]),s._v(" "),t("h3",{attrs:{id:"_7-map和foreach的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-map和foreach的区别"}},[s._v("#")]),s._v(" 7.\tmap和forEach的区别")]),s._v(" "),t("p",[s._v("（map返回的是一个新的数组，forEach改变的是原数组。 相同点：都是数组方法，都是循环遍历，三个参数相同，this指向window）")]),s._v(" "),t("h3",{attrs:{id:"_8-for-in和for-of的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-for-in和for-of的区别"}},[s._v("#")]),s._v(" 8.\tfor in和for of的区别")]),s._v(" "),t("ol",[t("li",[s._v("for in会遍历数组所有的可枚举属性，包括原型，主要是为了遍历对象而生，不适用于遍历数组"),t("br"),s._v("\nfor of遍历的只是数组内的元素，不包括原型属性和索引。可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象等拥有迭代器对象（iterator）的集合，但是不能遍历对象，因为没有迭代器对象")]),s._v(" "),t("li",[s._v("for of遍历我们直接"),t("code",[s._v("let obj = {name：'auv'}")]),s._v("生成的对象会报错，所以不能便利属性")]),s._v(" "),t("li",[s._v("forEach不能使用return跳出循环,for of可以")]),s._v(" "),t("li",[s._v("都不能遍历键名为symbol类型的")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/rogerwu/p/10738776.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1)]),s._v(" "),t("blockquote",[t("p",[s._v("for in适用于遍历对象,for  of适用于遍历数组")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  \n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"_9-promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-promise"}},[s._v("#")]),s._v(" 9.\tPromise")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//基本使用\nlet promise = new Promise((resolve,reject)=>{\n   if(true){\n      resolve('promise成功啦')\n   }else{\n      reject('promise失败啦')\n   }\n})\n\npromise.then(res=>{\n   console.log(res)\n}).catch(err=>{\n   console.log(err)\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV1U34y1m7a6",target:"_blank",rel:"noopener noreferrer"}},[s._v("简单易懂的Promise教程"),t("OutboundLink")],1)]),s._v(" "),t("ul",[t("li",[s._v("Promise在new的时候，里面的程序会被立即执行，then catch里的才会异步")]),s._v(" "),t("li",[s._v("Promise.all（）全部成功返回成功，一个失败就返回失败。获得的结果顺序跟接受的数组顺序是一致的")]),s._v(" "),t("li",[s._v("Promise.any（）有一个成功就返回该成功的结果，如果全部失败则返回失败")]),s._v(" "),t("li",[s._v("Promise.race（）哪个结果返回成功的快用哪个")]),s._v(" "),t("li",[s._v("Promise的三种状态（1、pending[待定]初始状态 2、fulfilled(resloved)操作成功 3、rejected操作失败）"),t("br"),s._v("\n默认是pending状态，调用了resolve\\reject方法之后状态才会相应的改变。"),t("br"),s._v("\n无论是 then 还是 catch,只要没有抛出异常，返回都是一个resloved状态的Promise")]),s._v(" "),t("li",[s._v("当promise的then中有触发catch的操作时，会立即执行，而不是放到微任务队列中")]),s._v(" "),t("li",[s._v("await接收的函数会立即执行，但是await下面的代码会等待本轮事件循环执行完毕之后才开始执行")])]),s._v(" "),t("h3",{attrs:{id:"_10-对模块化和组件化的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-对模块化和组件化的理解"}},[s._v("#")]),s._v(" 10.\t对模块化和组件化的理解")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("模块化")]),s._v("\n就是封装细节、提供使用借口而不能随意更改模块内容、每个模块都是一个特定的功能")],1),s._v(" "),t("p",[s._v("将一些功能化、可复用性较强的代码分类、归总，在业务代码中就可以用最精简的部分，有利于维护\n"),t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("组件化")])],1),s._v(" "),t("ol",[t("li",[s._v("将一些常用的功能封装起来，可复用性提高")]),s._v(" "),t("li",[s._v("组件间的耦合度降低，维护起来也更方便")])])]),s._v(" "),t("h3",{attrs:{id:"_11-cookie-localstorage-sessionstorage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-cookie-localstorage-sessionstorage"}},[s._v("#")]),s._v(" 11.\tcookie，localStorage, sessionStorage")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/weixin_42614080/article/details/90706499?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&utm_relevant_index=2",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("| 方法 | 生命期 | 存放大小 | 与服务器的通信 | 作用域 |\n|--\t|--\t|--\t|--\t|\n| cookie|可设置失效时间，默认浏览器关闭后实效 | 4KB | 每次都会携带在http头中，如果数据过多会有性能问题 | 在所有同源窗口中共享 |\n| localStorage | 除非主动清除，否则永久有效 | 5MB | 只保存在浏览器，不参与请求 | 在所有同源窗口中共享  |\n| sessionStorage | 页面或者浏览器关闭失效 | 5MB | 只保存在浏览器，不参与请求  | 只在当前窗口有效  |")])]),s._v(" "),t("h3",{attrs:{id:"_12-对象的继承有哪几种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-对象的继承有哪几种方式"}},[s._v("#")]),s._v(" 12.\t对象的继承有哪几种方式")]),s._v(" "),t("h3",{attrs:{id:"_13-数组的扁平化处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-数组的扁平化处理"}},[s._v("#")]),s._v(" 13.\t数组的扁平化处理")]),s._v(" "),t("h3",{attrs:{id:"_14-树形结构的数据处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-树形结构的数据处理"}},[s._v("#")]),s._v(" 14.\t树形结构的数据处理")]),s._v(" "),t("h3",{attrs:{id:"_16-那些常见操作会造成内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-那些常见操作会造成内存泄漏"}},[s._v("#")]),s._v(" 16.\t那些常见操作会造成内存泄漏")]),s._v(" "),t("p",[s._v("1. setTimeout 的第一个参数使用字符串而非函数的话,会引发内存泄露\n2. 全局变量\n3. Bi包\n4. dom清空或删除时，事件未清除导致的内存泄漏\n5. 控制台日志\n6. 循环")]),s._v(" "),t("h3",{attrs:{id:"_17-null和undefined的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-null和undefined的区别"}},[s._v("#")]),s._v(" 17.   null和undefined的区别")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("一些神奇的现象")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("null == undefined\n12 + null = null\n12 + undefined = NaN\nNumber('12')         //12\nNumber(undefined)    //NaN\nNumber(null)         //0\n\n//给一个变量赋值为undefined相当于没赋值\nfunction show(a,b=5){\n   console.log(a,b)\n}\n\nshow(4,undefined)       //4,5\nshow(4,null)            //4,null\n//解构赋值也是如此\nconst [a,b=88] = [11,undefined]\nconsole.log(a,b)        //11,88\n\nconst [a,b=88] = [11,null]\nconsole.log(a,b)        //11,null\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[t("strong",[s._v("undefined:")]),t("br"),s._v("\n理解(当系统找不到你想到得到的那个值的时候，被动的抛出undefined)")]),s._v(" "),t("ol",[t("li",[s._v("被迫的替代性方案")]),s._v(" "),t("li",[s._v("本质是特殊对象")]),s._v(" "),t("li",[s._v("JS特有的关键词")]),s._v(" "),t("li",[s._v("作用非常类似于没写(函数传参如果传undefined等同于什么都没写)")])]),s._v(" "),t("p",[t("strong",[s._v("null:")])]),s._v(" "),t("ol",[t("li",[s._v("主动选择(只有当手动赋值为null，才可能为null)")]),s._v(" "),t("li",[s._v("本质是0,至于typeof null等于'object'仅仅是因为JS作者这么设计了")]),s._v(" "),t("li",[s._v("接近于其他语言的NULL")]),s._v(" "),t("li",[s._v("显式的空(函数传参传null就代表是传了值的)")])])])]),s._v(" "),t("h3",{attrs:{id:"_18-this指向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-this指向"}},[s._v("#")]),s._v(" 18.   "),t("strong",[s._v("this指向")])]),s._v(" "),t("p",[s._v("1：this永远指向一个对象；this的指向完全取决于函数调用的位置；第一准则是：this永远指向函数运行时所在的对象，而不是函数被创建时所在的对象。")]),s._v(" "),t("p",[s._v("2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("o = {\n   a : 1,\n   b : function show(){\n            console.log(this)\n       }\n}\no.b()   //o\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("当图2中的b被赋值给另外一个变量，由另一个变量执行的时候，this就指向该变量所属的对象")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var i = o.b;      //只是赋值\n\ni();              //这才是真正调用，所以指向window\n\n\nvar j = o.b();      //如果是这样则依然指向o\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function show(){\n   console.log(this)\n}\n\n//1.直接调用-----指向window||undefined \nshow()；\n原本这个show不属于任何对象，按理说this应该没有指向才对，这是JS作者设计的一个失误，他就是这么设计了。\n后来他想了一个弥补的办法，那就是严格模式'use strict'\n在JS代码顶部加入这个字符串  那么上面的代码输出结果即为undefined \n\n\n//2.挂载到对象，然后执行对象方法-----指向对象本身\nconst arr = [1,2,3]\narr.fn = show\narr.fn()          \n\n//3.定时器-----指向window（这个跟严格模式无关了，因为定时器就是window的属性，由window执行）\nsetTimeOut(show,1000)\n\n//4.构造函数-----指向new出来的实例||如果构造函数return了一个对象，则指向return的对象\nlet a = new show()\n\n//5.工具函数-----写什么指向什么\nshow.call(2);           //2\nshow.call([a:1]);       //[a:1]\n\n//6.forEach-----指向第二个参数，没写就是window(非严格)||undefined(严格)\nlet arr = [1,2,3]\narr.forEach(function(item){\n   console.log(this)\n},888)                  //888\n\n//7.  严格模式汇总\n1. 全局作用域下，this指向window\n2. 全局函数中，this指向undefined\n3. 对象函数中，指向对象实例\n\n\n\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br")])]),t("h3",{attrs:{id:"_19-数组sort排序的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-数组sort排序的原理"}},[s._v("#")]),s._v(" 19.   数组sort排序的原理")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("它会拿出数组的每一项出来比较，x是后一项，y是前一项，返回值是正值则正序，负值则倒序")]),s._v(" "),t("h3",{attrs:{id:"_20-instanceof和typeof的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-instanceof和typeof的区别"}},[s._v("#")]),s._v(" 20.   instanceof和typeOf的区别")]),s._v(" "),t("p",[s._v("instanceof: 检测构造函数在不在实例对象的原型链上,返回的是布尔值"),t("br"),s._v("\n1. 左侧的操作值一定要是一个引用类型的值，如果是基础类型一定会返回false")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("  ```\n     'a' instanceof String               //false\n     new String('a') instanceof String   //true\n  ```\n")])])]),t("p",[s._v("typeof: 只适用于检测除null之外的基础数据类型和函数类型，返回的是字符串"),t("br"),s._v("\n1. typeof {} = 'object'"),t("br"),s._v("\n2. typeof [] = 'object'"),t("br"),s._v("\n3. typeof undefined = 'undefined'"),t("br"),s._v("\n4. typeof null = 'object'  //只是因为作者这么设计了"),t("br"),s._v("\n5. typeof Symbol() = 'symbol'"),t("br"),s._v("\n6. typeof Symbol = 'function'")]),s._v(" "),t("h3",{attrs:{id:"_21-arguments参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-arguments参数"}},[s._v("#")]),s._v(" 21.   arguments参数")]),s._v(" "),t("h3",{attrs:{id:"_22-call-apply-bind的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-call-apply-bind的区别"}},[s._v("#")]),s._v(" 22.   call  apply bind的区别")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[s._v("三者都是改变this指向的。"),t("br"),s._v("\ncall和apply的区别是传参形式的不同，call的参数是一个一个写的，apply的参数需要写在一个数组里。\ncall和apply在改变完this指向后会立即执行,bind会返回一个新的函数，然后等待执行。"),t("br"),s._v("\nbind返回的函数this指向就固定了，无法再继续通过 call  apply bind的方式修改this指向。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let fn = function(a,b){\n   console.log(this,a,b);\n}\n\nconst obj = {name:'哎呦喂'}\n\nfn.call(obj,1,2)           //obj,1,2\nfn.apply(obj,[1,2])        //obj,1,2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("小知识：\ncall在严格模式下，this传谁就指向谁，不传指向undefined;"),t("br"),s._v("\n在非严格模式下，传null、undefined或者不传，this都指向window;")])]),s._v(" "),t("h3",{attrs:{id:"_23-创建对象的几种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-创建对象的几种方式"}},[s._v("#")]),s._v(" 23.   创建对象的几种方式")]),s._v(" "),t("ul",[t("li",[s._v("直接new Object()然后往实例对象上添加属性")]),s._v(" "),t("li",[s._v("工厂模式(在函数中构建对象并返回)")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   function people(name,age,sex){\n      let obj = new Object();\n      obj.name = name;\n      obj.age = age;\n      obj.sex = sex;\n      return obj;\n   }\n\n   const people1 = people('fengfeng',25,'boy');\n   const people2 = people('lele',22,'girl');\n\n   但是输出一下 people1 instanceOf people会看到false,可见工厂模式还是有一定的问题\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("ul",[t("li",[s._v("构造函数(首字母大写，并且不需要创建对象返回对象，因为new的时候会隐式的做这些)")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function People(name,age,sex){\n   this.name = name;\n   this.age = age;\n   this.sex = sex;\n}\n\nconst people1 = new People('fengfeng',25,'boy');\nconst people2 = new People('lele',22,'girl');\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[s._v("ES6的class(外面用class包裹，里面就是将构造函数换成了construcor)")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class People {\n   constructor(name, age, sex) {\n      this.name = name;\n      this.age = age;\n      this.sex = sex;\n   }\n}\n\nconst people1 = new People("fengfeng", 25, "boy");\nconst people2 = new People("lele", 22, "girl");\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h3",{attrs:{id:"_24-原型-原型链-原型继承原理-实例、构造函数和原型的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-原型-原型链-原型继承原理-实例、构造函数和原型的关系"}},[s._v("#")]),s._v(" 24.  原型&&原型链&&原型继承原理&&实例、构造函数和原型的关系")]),s._v(" "),t("h4",{attrs:{id:"自己的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自己的理解"}},[s._v("#")]),s._v(" 自己的理解")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("  1. 每一个实例都是由构造函数通过new创建出来的，原理是将构造函数的this指向自身。  \n  2. 实例的__proto__属性指向构造函数的原型对象。  \n  3. 构造函数的prototype也指向它的原型对象。  \n  4. 原型的constructor指向构造函数。\n")])])]),t("h4",{attrs:{id:"原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[s._v("#")]),s._v(" 原型链：")]),s._v(" "),t("p",[s._v("当我们访问一个对象属性的时候，如果对象本身没有，就去对象原型上面找，原型上面没有就去原型的原型上找，直到原型为null为止。")]),s._v(" "),t("h4",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("proto")]),s._v("（隐式原型）与prototype（显式原型）   也可以说 实例对象的__proto__等于构造函数的原型prototype")])]),s._v(" "),t("li",[t("p",[s._v("实例对象的隐式原型 等于 实例构造函数的显示原型")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const aiyouwei = new Person();\naiyouwei.__proto__ === Person.prototype\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("只有函数对象身上才会有prototype属性，new出来的实例对象都是普通对象，没有这个属性，只有__proto__（函数通过prototype来追溯原型对象，对象通过_proto_来追溯原型对象。）")])])]),s._v(" "),t("h3",{attrs:{id:"_25-类的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-类的继承"}},[s._v("#")]),s._v(" 25.  类的继承")]),s._v(" "),t("h3",{attrs:{id:"_26-super关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-super关键字"}},[s._v("#")]),s._v(" 26.  super关键字")]),s._v(" "),t("h3",{attrs:{id:"_27-eventloop事件循环机制的执行顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-eventloop事件循环机制的执行顺序"}},[s._v("#")]),s._v(" 27.  Eventloop事件循环机制的执行顺序")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844903764202094606",target:"_blank",rel:"noopener noreferrer"}},[s._v("一次弄懂Event Loop（彻底解决此类面试问题"),t("OutboundLink")],1),s._v(" "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1eQ4y1d7mE",target:"_blank",rel:"noopener noreferrer"}},[s._v("技术蛋老师解析"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("JS是一门单线程语言，异步任务都是放在异步任务队列中，等待主线程执行的，并没有专门的异步执行线程。\nJS有一个主线程和一个调用栈，所有任务都被放在调用栈等待主线程执行。执行一个清空一个，等待下一个进来。"),t("br"),s._v("\n执行顺序：同步代码 -> 微任务 -> DOM渲染 -> 宏任务")]),s._v(" "),t("ol",[t("li",[s._v("遇到同步代码，就放到主线程中，一步一步执行。")]),s._v(" "),t("li",[s._v("遇到异步代码，先放到任务队列中，等待主线程的操作执行完毕。")]),s._v(" "),t("li",[s._v("查看异步队列，先执行微任务，再执行宏任务。\n每次【单个】宏任务执行完毕，都会去查看微任务列表，有就优先执行，所以插入微任务会阻塞宏任务的执行！")]),s._v(" "),t("li",[s._v("微任务（promise.then\\catch、async/await）")]),s._v(" "),t("li",[s._v("宏任务（setTimeOut，setInterval、script（整体代码）、回调函数（点击事件等）、ajax请求、UI 渲染等）要注意他们的延迟时间")])]),s._v(" "),t("h3",{attrs:{id:"_28-js预编译预解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-js预编译预解析"}},[s._v("#")]),s._v(" 28.  JS预编译预解析")]),s._v(" "),t("ol",[t("li",[s._v("定义阶段：(代码还没有执行。预览页面之前，写完之后)\n寻找var关键字，如果找到了提前给var定义的变量赋值undefined\n寻找的普通函数，如果找到了，函数提升，将整个函数赋值给函数名。\n如果找的var的名字和函数名字相同，函数优先。")]),s._v(" "),t("li",[s._v("执行阶段：逐行解析代码。按照上下顺序。如果碰到函数定义，忽略。")])]),s._v(" "),t("h3",{attrs:{id:"_29-想要得到异步请求的结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-想要得到异步请求的结果"}},[s._v("#")]),s._v(" 29.  想要得到异步请求的结果")]),s._v(" "),t("ol",[t("li",[s._v("callback回调函数")]),s._v(" "),t("li",[s._v("promise+async/await")])]),s._v(" "),t("h3",{attrs:{id:"_30-创建一个长度为n-元素为指定内容的数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-创建一个长度为n-元素为指定内容的数组"}},[s._v("#")]),s._v(" 30.  创建一个长度为n，元素为指定内容的数组")]),s._v(" "),t("p",[s._v("//fill内可以填任意元素\n"),t("code",[s._v("const array = new Array(9).fill('')")]),s._v("\n//创建一个数组，里面的元素是元素对应的下标\n"),t("code",[s._v("var arr = Array.from({length:100}, (v,k) => k);")])]),s._v(" "),t("h3",{attrs:{id:"_31-事件流、事件捕获和事件冒泡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-事件流、事件捕获和事件冒泡"}},[s._v("#")]),s._v(" 31.  事件流、事件捕获和事件冒泡")]),s._v(" "),t("p",[s._v("事件流分为三个阶段：事件捕获阶段 ->  处于目标阶段 -> 事件冒泡阶段")]),s._v(" "),t("p",[s._v("addEventListener接受三个参数：事件名、方法、布尔值。第三个参数是为了区分事件在冒泡阶段触发还是捕获阶段触发。默认为false，事件冒泡阶段触发。改为true即为事件捕获阶段触发。")]),s._v(" "),t("img",{attrs:{src:"/assets/img/interview/interview2.jpg",width:"600",height:"auto",align:"middle"}}),s._v("\n如图所示，在事件触发的过程中，addEnentListener的第三个参数规定了事件在事件流的哪个阶段触发，所以先触发捕获阶段的两个方法，从外到内。\n"),t("h3",{attrs:{id:"_32-堆栈内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-堆栈内存"}},[s._v("#")]),s._v(" 32.  堆栈内存")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("JS中的内存空间分为栈(stack)、堆(heap)、池(一般会归类为栈中)。"),t("br"),s._v("\n栈内存有序排列，并且大小固定。堆内存无需排列，大小不固定。")])]),s._v(" "),t("li",[t("p",[s._v("基本数据类型的值比较简单，数据大小是确定的，保存在栈区中，基本类型变量的复制，会在栈区中创建一个新值，然后把值赋值给新的变量")])]),s._v(" "),t("li",[t("p",[s._v("引用数据类型的值保存在堆区中，在栈区中保存的只是一个引用地址。操作时，需要先从栈区中找到引用地址，在沿着指针找到堆区中的值进行操作。引用类型变量的复制，会将两个变量指向同一个引 用地址，一个变都变。")])])]),s._v(" "),t("h3",{attrs:{id:"_33-深拷贝浅拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33-深拷贝浅拷贝"}},[s._v("#")]),s._v(" 33.  深拷贝浅拷贝")]),s._v(" "),t("blockquote",[t("p",[s._v("深拷贝是指源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。")])]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/7013603488315736072",target:"_blank",rel:"noopener noreferrer"}},[s._v("深拷贝的实现方式"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[s._v("利用递归遍历深拷贝")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    function deepClone(obj) {\n        let objClone = Array.isArray(obj) ? [] : {}; \n        if (obj && typeof obj === "object") {\n            for (key in obj) {\n                if (obj.hasOwnProperty(key)) {                \n                    //判断ojb子元素是否为对象，如果是，递归复制\n                    if (obj[key] && typeof obj[key] === "object") {\n                        objClone[key] = deepClone(obj[key]);\n                    } else {                    //如果不是，简单复制\n                        objClone[key] = obj[key];\n                    }\n                }\n            }\n        } \n        return objClone;\n    }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("JSON.stringfy将对象变为字符串，再利用JSON.parse将字符串变为新的对象"),t("br"),s._v(" "),t("a",{attrs:{href:"https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.3.1",target:"_blank",rel:"noopener noreferrer"}},[s._v("其他方式实现深拷贝有什么问题"),t("OutboundLink")],1),s._v("\n问题：\n"),t("ol",[t("li",[s._v("对象中的值为方法、undefined、Symbol值时会被忽略")]),s._v(" "),t("li",[s._v("NaN 和 Infinity 格式的数值及 null 都会被当做 null")]),s._v(" "),t("li",[s._v("对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误")])])]),s._v(" "),t("li",[s._v("Object.assign()实现的是浅拷贝。\n问题："),t("br"),s._v("\n对最外层的对象实现深拷贝，如果对象中还有对象，则为浅拷贝。...、slice、concat方法同理")])]),s._v(" "),t("h3",{attrs:{id:"_34-js属性对象的hasownproperty方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34-js属性对象的hasownproperty方法"}},[s._v("#")]),s._v(" 34.  js属性对象的hasOwnProperty方法")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/weiqinl/p/8683207.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("讲得太好了，直接看吧"),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"_35-get和post的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35-get和post的区别"}},[s._v("#")]),s._v(" 35.  get和post的区别")]),s._v(" "),t("ol",[t("li",[s._v("get的数据在url中明文发送，不安全，post用户一般看不到")]),s._v(" "),t("li",[s._v("get可以发送的数据有限，因为url的长度有限，post默认是不受限制的")]),s._v(" "),t("li",[s._v("GET产生一个TCP数据包；POST产生两个TCP数据包。")])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),t("p",[s._v("对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；")]),s._v(" "),t("p",[s._v("而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/logsharing/p/8448446.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("详解"),t("OutboundLink")],1)])]),s._v(" "),t("h3",{attrs:{id:"_36-arguments对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36-arguments对象"}},[s._v("#")]),s._v(" 36.  arguments对象")]),s._v(" "),t("p",[s._v("是一个保存了我们传入函数的全部实参的类数组对象，有length和callee属性。"),t("br"),s._v("\ncallee属性返回的是函数本身，我们可以利用它实现一些递归函数。")]),s._v(" "),t("h3",{attrs:{id:"_37-new操作符做了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37-new操作符做了什么"}},[s._v("#")]),s._v(" 37.  new操作符做了什么")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[t("code",[s._v("let aiyouwei = new Aiyouwei()")])]),s._v(" "),t("ol",[t("li",[s._v("先创建一个空对象\n"),t("code",[s._v("let obj = {}")])]),s._v(" "),t("li",[s._v("将空对象的__proto__指向构造函数的原型\n"),t("code",[s._v("obj.__proto__ = Aiyouwei.prototype")])]),s._v(" "),t("li",[s._v("将构造函数的this指向空对象\n"),t("code",[s._v("let result = Aiyouwei.call(obj,arg)")])]),s._v(" "),t("li",[s._v("对函数返回值进行判断\n"),t("code",[s._v("result instaceOf Object?result:obj")])])]),s._v(" "),t("p",[s._v("在new的时候，会对"),t("strong",[s._v("构造函数的返回值")]),s._v("做一些判断：")]),s._v(" "),t("p",[s._v("1、如果返回值是基础数据类型，则忽略返回值；")]),s._v(" "),t("p",[s._v("2、如果返回值是引用数据类型，则使用return 的返回，也就是new操作符无效；")]),s._v(" "),t("p",[s._v("示例：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function Person(name){\n  this.name = name;\n  return 1; // return undefined/NaN/'string'/null\n}\nlet me = new Person('快乐每一天');\nconsole.log(me); // { name:'快乐每一天' }\n\n\nfunction Person(name){\n  this.name = name;\n  return { age:12 };\n}\nlet me = new Person('快乐每一天');\nconsole.log(me); // { age:12 }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"_38-es6新特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_38-es6新特性"}},[s._v("#")]),s._v(" 38.  ES6新特性")]),s._v(" "),t("h3",{attrs:{id:"_39-闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_39-闭包"}},[s._v("#")]),s._v(" 39.  闭包")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("  理解：\n  1、   闭包就是能够读取其他函数内部变量的函数。  \n  2、   定义在一个函数内部的函数。  \n  3、   一个函数和他周围状态的引用捆绑在一起的组合。当函数内部引用了一个变量，而他自身没有定义时，会在【定义函数】的地方向上一级查找。\n  ```\n     //举例1\n     const a = 2;\n     function son(){\n        console.log(a)\n     };\n\n     function test(fn){\n        const a = 4;\n        return fn();\n     }\n     test(son);      //2\n\n     //举例2\n     function son(){\n        const a = 2;\n        return function(){\n           console.log(a)\n        }\n     };\n\n     const a = 4;\n\n     const result = son()();\n  ```\n")])])]),t("h3",{attrs:{id:"_40-作用域和作用域链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_40-作用域和作用域链"}},[s._v("#")]),s._v(" 40.  作用域和作用域链")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("ol",[t("li",[s._v("作用域分为全局作用域和函数作用域。")]),s._v(" "),t("li",[s._v("访问一个变量的时候，会在当前作用域先查找，找不到会去上级作用域，直到找到全局作用域。这个过程形成的链条就叫作用域链。")]),s._v(" "),t("li",[s._v("所有末定义直接赋值的变量自动声明为拥有全局作用域")]),s._v(" "),t("li",[s._v("当前作用域没有定义的变量，称为 自由变量 。自由变量的值如何得到 ？要到创建这个函数的域中查找，无论函数在哪里调用。")])])]),s._v(" "),t("h3",{attrs:{id:"_41-获取url参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_41-获取url参数"}},[s._v("#")]),s._v(" 41.  获取url参数")]),s._v(" "),t("h3",{attrs:{id:"_42-数组去重-多维转一维"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_42-数组去重-多维转一维"}},[s._v("#")]),s._v(" 42.  数组去重  多维转一维")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let arr = [[1, 2], 3, 4, [5, 6, 7], 8, [9]]\nlet newArr = arr.reduce((acc, cur) => {\n  return acc.concat(cur)\n}, [])\nconsole.log(newArr) // (9) [1, 2, 3, 4, 5, 6, 7, 8, 9]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"_43-symbol类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_43-symbol类型"}},[s._v("#")]),s._v(" 43.  Symbol类型")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/xcg132566/article/details/108109837",target:"_blank",rel:"noopener noreferrer"}},[s._v("理解JavaScript基本数据类型symbol"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[s._v("创建一个 symbol 的值需要使用 Symbol() 函数，而不能使用 new 命令")]),s._v(" "),t("li",[s._v("由于生成的 symbol 是一个值而不是对象，所以不能为其添加属性")]),s._v(" "),t("li",[s._v("Symbol 的本质是表示一个唯一标识")]),s._v(" "),t("li",[s._v("理论上 Symbol 的存在只有一个意义：用于必须使用唯一值的场景。")])]),s._v(" "),t("h3",{attrs:{id:"_44-map和set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_44-map和set"}},[s._v("#")]),s._v(" 44.  Map和Set")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1499648",target:"_blank",rel:"noopener noreferrer"}},[s._v("JS基础：Map和Set对象"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[s._v("Set\n"),t("ol",[t("li",[s._v("里面的数据都是不重复的")]),s._v(" "),t("li",[s._v("基础方法有set、delete、has、size、clear。遍历方法有forEach、keys()、values()、entries()")]),s._v(" "),t("li",[s._v("使用：数组去重、获取交集")]),s._v(" "),t("li",[s._v("添加值得时候不会自动进行数据转换，所以5和'5'是两个不同的值 "),t("code",[s._v("let b = new Set().add(5).add('5')")])]),s._v(" "),t("li",[s._v("同一个值多次添加，后面添加的会被排除")])])]),s._v(" "),t("li",[s._v("Map\n"),t("ol",[t("li",[s._v("普通对象是key:value;Map对象是key=>value")]),s._v(" "),t("li",[s._v("同一个键多次赋值，后面的结果会覆盖前面的")])])])]),s._v(" "),t("h2",{attrs:{id:"css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css"}},[s._v("#")]),s._v(" CSS")]),s._v(" "),t("h3",{attrs:{id:"_1-重绘和重排-回流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-重绘和重排-回流"}},[s._v("#")]),s._v(" 1.\t重绘和重排（回流）")]),s._v(" "),t("p",[s._v("浏览器渲染过程")]),s._v(" "),t("ol",[t("li",[s._v("解析HTML生成DOM树。")]),s._v(" "),t("li",[s._v("解析CSS生成CSSOM规则树。")]),s._v(" "),t("li",[s._v("将DOM树与CSSOM规则树合并在一起生成渲染树。")]),s._v(" "),t("li",[s._v("遍历渲染树开始布局，计算每个节点的位置大小信息。")]),s._v(" "),t("li",[s._v("将渲染树每个节点绘制到屏幕。")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("重绘")])],1),s._v(" "),t("p",[s._v("重绘就是当元素的样式发生变化，但不影响几何属性的时候，浏览器只会重新绘制该元素的样式。比方只改变元素的背景颜色，就只会发生重绘。")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("回流")])],1),s._v(" "),t("p",[s._v("回流就是当元素的几何属性发生变化的时候，浏览器需要重新计算元素的大小位置(其他元素也会受到影响)，然后重新绘制出来的过程。比如：添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变")]),s._v(" "),t("p",[s._v("回流必将重绘，重回不一定回流。页面第一次渲染的时候，必将触发一次回流。")]),s._v(" "),t("p",[s._v("offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop���clientLeft、clientWidth、clientHeight 获取这些浏览器尺寸的时候，因为都是通过计算得到，所以也会触发回流")])]),s._v(" "),t("h3",{attrs:{id:"_2-css实现两边固定-中间自适应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-css实现两边固定-中间自适应"}},[s._v("#")]),s._v(" 2.\tcss实现两边固定 中间自适应")]),s._v(" "),t("h3",{attrs:{id:"_3-css3圆角属性如何兼容ie低版本浏览器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-css3圆角属性如何兼容ie低版本浏览器"}},[s._v("#")]),s._v(" 3.\tcss3圆角属性如何兼容ie低版本浏览器")]),s._v(" "),t("h3",{attrs:{id:"_4-display-none和visibility-hidden有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-display-none和visibility-hidden有什么区别"}},[s._v("#")]),s._v(" 4.\tdisplay:none和visibility：hidden有什么区别")]),s._v(" "),t("ol",[t("li",[s._v("visibility，即使隐藏以后也会占据空间，且子元素继承属性，可以单独显示")]),s._v(" "),t("li",[s._v("display设置为none，会从文档流中消失，其他元素会顶上来")])]),s._v(" "),t("h3",{attrs:{id:"_5-对盒模型的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-对盒模型的理解"}},[s._v("#")]),s._v(" 5.\t对盒模型的理解")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("p",[s._v("一个盒子所占空间的大小由内容+内边距+边框+外边距来决定���")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("标准盒模型（W3C标准模型）")]),s._v(" "),t("code",[s._v("box-sizing:content-box")]),t("br"),s._v("\n顾名思义，盒子的大小等于内容的大小")],1),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("怪异盒模型（IE模型）")]),s._v(" "),t("code",[s._v("box-sizing:border-box")]),t("br"),s._v("\n盒子的大小等于内容的大小+padding+border")],1)]),s._v(" "),t("h3",{attrs:{id:"_6-页面引入了多个css的情况下-如何处理才能减少请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-页面引入了多个css的情况下-如何处理才能减少请求"}},[s._v("#")]),s._v(" 6.\t页面引入了多个css的情况下，如何处理才能减少请求")]),s._v(" "),t("p",[s._v("（新建一个css文件，利用@important 引入其余的所有css文件，主页面只引入我们新建的css即可）")]),s._v(" "),t("h3",{attrs:{id:"_7-响应式布局和自适应布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-响应式布局和自适应布局"}},[s._v("#")]),s._v(" 7.   响应式布局和自适应布局")]),s._v(" "),t("h3",{attrs:{id:"_8-元素水平垂直居中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-元素水平垂直居中"}},[s._v("#")]),s._v(" 8.   元素水平垂直居中")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("ol",[t("li",[s._v("已知元素宽高的情况下"),t("br"),s._v("\n定位元素  左50% 上50%  margin-left和margin-top各为宽高的一半")]),s._v(" "),t("li",[s._v("元素宽高未知"),t("br"),s._v("\n定位元素  左50% 上50%  translateX(-50%) translateY(-50%)或者transform:translate(-50%,-50%);")]),s._v(" "),t("li",[s._v("定位元素 上50% 下50% 左50% 右50% margin:auto")]),s._v(" "),t("li",[s._v("vertical-align:middle和margin:0 auto")])])]),s._v(" "),t("p",[s._v("样式旋转\n放大  阴影")]),s._v(" "),t("h3",{attrs:{id:"_9-渐进增强和优雅降级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-渐进增强和优雅降级"}},[s._v("#")]),s._v(" 9.   渐进增强和优雅降级")]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("优雅降级")]),s._v("\n在保证功能和效果完整的情况下，再针对低版本浏览器做一些兼容。"),t("br"),s._v(" "),t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("渐进增强")]),s._v("\n一开始就针对低版本浏览器进行构建，完成基本功能。再针对高版本浏览器追加效果、交互体验\n"),t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("如何选择")]),s._v("\n分析客户端的浏览器使用占比。大公司基本上采用渐进增强，优先保证基本功能。")],1),s._v(" "),t("h3",{attrs:{id:"_10-清除浮动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-清除浮动"}},[s._v("#")]),s._v(" 10.  清除浮动")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("参考")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/94697222",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1)]),s._v(" "),t("blockquote",[t("p",[s._v("一个容器内部的元素设置了float属性，导致容器高度塌陷，内部元素跑到了容器外部，影响了整体布局的现象。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   <div>\n      <span></span>\n      <p></p>\n   </div>\n\n   div{\n      height: auto;\n   }\n   span{\n      float: right;\n   }\n   p{\n      float: left;\n   }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("ol",[t("li",[s._v("给子元素末尾添加一个隐藏元素，给隐藏元素设置 clear:both 属性。")]),s._v(" "),t("li",[s._v("给父元素添加一个伪元素，给伪元素设置 clear:both 属性。")]),s._v(" "),t("li",[s._v("给父元素设置浮动，但是会影响别的布局，不推荐。")]),s._v(" "),t("li",[s._v("给父元素设置 overflow: auto/hidden 清除浮动。")])])]),s._v(" "),t("h3",{attrs:{id:"_11-圣杯布局和双飞翼布局-左右固定-中间自适应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-圣杯布局和双飞翼布局-左右固定-中间自适应"}},[s._v("#")]),s._v(" 11.  圣杯布局和双飞翼布局(左右固定，中间自适应)")]),s._v(" "),t("p",[s._v("双飞翼布局比圣杯布局多创建了一个div，但不用相对布局了"),t("br"),s._v(" "),t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("圣杯")])],1),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<header></header>\n   <div class="box">\n      <div class="middle">中间区域</div>\n      <div class="left">左</div>\n      <div class="right">右</div>\n   </div>\n<footer></footer>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ol",[t("li",[s._v("box中的元素全部浮动float:left;（不要忘记footer的清除浮动）")]),s._v(" "),t("li",[s._v("box加左右padding将中间区域压缩")]),s._v(" "),t("li",[s._v("左右块通过position:relative调整位置到左右两边")])])]),s._v(" "),t("p",[t("font",{staticStyle:{fontSize:"25px"},attrs:{color:"#0099ff",face:"正楷"}},[s._v("双飞翼")])],1),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("详情")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<header></header>\n   <div id="middle">\n      <div id="inside">中间区域</div>\n   </div>\n   <div id="left">左</div>\n   <div id="right">右</div>\n<footer></footer>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ol",[t("li",[s._v("middle,left,right全部浮动；")]),s._v(" "),t("li",[s._v("middle宽度设置100%；inside设置margin:0 200px")]),s._v(" "),t("li",[s._v("通过margin-left移动left,right到指定位置")])])]),s._v(" "),t("h3",{attrs:{id:"_12-行内元素和块级元素的具体区别是什么-inline-block是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-行内元素和块级元素的具体区别是什么-inline-block是什么"}},[s._v("#")]),s._v(" 12.  行内元素和块级元素的具体区别是什么？inline-block是什么？")]),s._v(" "),t("ol",[t("li",[s._v("行内元素水平排列，不能设置宽高，padding,margin的上下都无效；块级元素垂直排列，单独占一行，可设置宽高，上下边距。")]),s._v(" "),t("li",[s._v("块级元素可以包含行内元素，反之则不行。")]),s._v(" "),t("li",[s._v("常见行内元素：span \\ i \\ img \\ input\n常见块级元素：div \\ form\\ ol \\ ul \\ li \\ p \\ table")])]),s._v(" "),t("h3",{attrs:{id:"_13-bfc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-bfc"}},[s._v("#")]),s._v(" 13.  BFC")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6950082193632788493",target:"_blank",rel:"noopener noreferrer"}},[s._v("请说说什么是BFC？大白话讲清楚"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[s._v("全程Block Formatting Contexts 块级格式化上下文")]),s._v(" "),t("li",[s._v("具有BFC特性的元素可以看作一个大箱子，无论内部的元素如何变化，都不会影响到外部||BFC是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局。")]),s._v(" "),t("li",[s._v("满足以下任一条件即可触发BFC：\n"),t("ol",[t("li",[s._v("body标签的根元素")]),s._v(" "),t("li",[s._v("有overflow属性，visible除外")]),s._v(" "),t("li",[s._v("有float属性，none除外")]),s._v(" "),t("li",[s._v("display:inlink-block\\flex\\table-cells")]),s._v(" "),t("li",[s._v("绝对定位position:absolute\\fixed")])])]),s._v(" "),t("li",[s._v("解决了哪些问题：\n"),t("ol",[t("li",[s._v("高度塌陷")]),s._v(" "),t("li",[s._v("外边距重合")]),s._v(" "),t("li",[s._v("两栏布局")])])])]),s._v(" "),t("h3",{attrs:{id:"_14-新特性ie兼容以及移动端自适应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-新特性ie兼容以及移动端自适应"}},[s._v("#")]),s._v(" 14.  新特性IE兼容以及移动端自适应")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV1cY411E7z6",target:"_blank",rel:"noopener noreferrer"}},[s._v("移动端完美flex布局，自适应布局"),t("OutboundLink")],1)]),s._v(" "),t("ol",[t("li",[s._v("HTML5语义化标签不识别：需要引入一个转换的JS文件，但是为了防止别的浏览器加载不必要的文件，要添加条件注释（针对IE9以下）")]),s._v(" "),t("li")]),s._v(" "),t("h3",{attrs:{id:"_15-flex布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-flex布局"}},[s._v("#")]),s._v(" 15.  flex布局")]),s._v(" "),t("ol",[t("li",[s._v("父元素-容器，子元素-项目")]),s._v(" "),t("li",[s._v("容器的属性：\n"),t("ol",[t("li",[s._v("flex-direction: row\\column；               主轴方向")]),s._v(" "),t("li",[s._v("flex-wrap: nowrap\\wrap;                    项目默认是不换行的，该属性就是控制是否允许换行")]),s._v(" "),t("li",[s._v("flex-flow: row nowrap\\column wrap;         flex-direction和flex-wrap的集合")]),s._v(" "),t("li",[s._v("justify: flex-start\\flex-end\\center;       项目在主轴上的排列方式")]),s._v(" "),t("li",[s._v("align-items: flex-start\\flex-end\\center;   项目在交叉轴上的排列方式")])])]),s._v(" "),t("li",[s._v("项目的属性：\n"),t("ol",[t("li",[s._v("flex-grow:0；                              项目的放大比例。默认0不放大")]),s._v(" "),t("li",[s._v("flex-shrink:1;                             项目的缩小比例。默认1按比例缩小")]),s._v(" "),t("li",[s._v("flex-basis: px;                            项目在占用剩余空间之前的大小，跟width类似")]),s._v(" "),t("li",[s._v("flex")])])])]),s._v(" "),t("h2",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[s._v("#")]),s._v(" webpack")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/113661886",target:"_blank",rel:"noopener noreferrer"}},[s._v("Webpack面试题"),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"有哪些常用的loader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常用的loader"}},[s._v("#")]),s._v(" 有哪些常用的loader")]),s._v(" "),t("p",[s._v("本质上是一个函数，对接受的内容进行转换")]),s._v(" "),t("ol",[t("li",[s._v("image-loader：加载并且压缩图片文件")]),s._v(" "),t("li",[s._v("babel-loader：把 ES6 转换成 ES5")]),s._v(" "),t("li",[s._v("sass-loader：将 CSS 代码注入 JavaScript 中，通过 DOM 操作去加载 CSS")]),s._v(" "),t("li",[s._v("css-loader：加载 CSS，支持模块化、压缩、文件导入等特性")]),s._v(" "),t("li",[s._v("style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS")]),s._v(" "),t("li",[s._v("postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀")]),s._v(" "),t("li",[s._v("vue-loader：加载 Vue.js 单文件组件")])]),s._v(" "),t("h3",{attrs:{id:"有哪些常见的plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常见的plugin"}},[s._v("#")]),s._v(" 有哪些常见的Plugin")]),s._v(" "),t("p",[s._v("本质上是一个插件，对内容功能进行拓展")]),s._v(" "),t("ol",[t("li",[s._v("define-plugin：定义环境变量 (Webpack4 之后指定 mode 会自动配置)")]),s._v(" "),t("li",[s._v("ignore-plugin：忽略部分文件")]),s._v(" "),t("li",[s._v("html-webpack-plugin：简化 HTML 文件创建 (依赖于 html-loader)")])]),s._v(" "),t("h2",{attrs:{id:"网络安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络安全"}},[s._v("#")]),s._v(" 网络安全")]),s._v(" "),t("ol",[t("li",[s._v("如何防止token被恶意获取")]),s._v(" "),t("li",[s._v("状态码302是什么")]),s._v(" "),t("li",[s._v("xss攻击")])]),s._v(" "),t("h2",{attrs:{id:"还没咋搞懂得"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#还没咋搞懂得"}},[s._v("#")]),s._v(" 还没咋搞懂得")]),s._v(" "),t("ol",[t("li",[s._v("移动端适配")]),s._v(" "),t("li",[s._v("webpack和vue.config.js的配置")]),s._v(" "),t("li",[s._v("重构项目的时候要考虑哪些方面")])]),s._v(" "),t("h2",{attrs:{id:"其他面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他面试题"}},[s._v("#")]),s._v(" 其他面试题")]),s._v(" "),t("h3",{attrs:{id:"项目开发流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目开发流程"}},[s._v("#")]),s._v(" 项目开发流程")]),s._v(" "),t("p",[s._v("需求获取->需求分析(技术研讨)->设计->开发->测试->打包部署->上线")]),s._v(" "),t("h3",{attrs:{id:"开发过程中遇到的最大难题是什么-怎么解决的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发过程中遇到的最大难题是什么-怎么解决的"}},[s._v("#")]),s._v(" 开发过程中遇到的最大难题是什么，怎么解决的")]),s._v(" "),t("h3",{attrs:{id:"你还有什么要问面试官的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#你还有什么要问面试官的"}},[s._v("#")]),s._v(" 你还有什么要问面试官的")]),s._v(" "),t("ol",[t("li",[s._v("人员组织架构  前后端配比")]),s._v(" "),t("li",[s._v("需求周期")]),s._v(" "),t("li",[s._v("面试中没有回答好的问题")]),s._v(" "),t("li",[s._v("工作流程")]),s._v(" "),t("li",[s._v("福利待遇、新员工培训")])]),s._v(" "),t("h3",{attrs:{id:"对未来的职业规划"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对未来的职业规划"}},[s._v("#")]),s._v(" 对未来的职业规划")]),s._v(" "),t("h3",{attrs:{id:"离职原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#离职原因"}},[s._v("#")]),s._v(" 离职原因")])])}),[],!1,null,null,null);a.default=n.exports}}]);