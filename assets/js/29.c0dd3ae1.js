(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{672:function(t,i,e){"use strict";e.r(i);var v=e(88),_=Object(v.a)({},(function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git的基础使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git的基础使用"}},[t._v("#")]),t._v(" Git的基础使用")]),t._v(" "),e("h2",{attrs:{id:"基础命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础命令"}},[t._v("#")]),t._v(" 基础命令")]),t._v(" "),e("ol",[e("li",[t._v("git status                  查看文件状态")]),t._v(" "),e("li",[t._v("git add 文件名               增加单个文件到暂存区")]),t._v(" "),e("li",[t._v("git reset <文件名>           将某个文件退出暂存区")]),t._v(" "),e("li",[t._v("git reset <'commit id'>     将版本回退到某次提交前")]),t._v(" "),e("li",[t._v("git log                     提交日志")]),t._v(" "),e("li",[t._v("git reflog                  所有的操作日志")]),t._v(" "),e("li",[t._v("git checkout -b<'name'><'template'>  创建新的分支")]),t._v(" "),e("li",[t._v("git check <'name'>          切换分支")])]),t._v(" "),e("h2",{attrs:{id:"文件状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件状态"}},[t._v("#")]),t._v(" 文件状态")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("Untracked"),e("br"),t._v("\n新建文件时的状态")])]),t._v(" "),e("li",[e("p",[t._v("Unmodified"),e("br"),t._v("\n文件刚刚git commit后的状态，未修改之前")])]),t._v(" "),e("li",[e("p",[t._v("Modified\n有过commit记录的文件")])]),t._v(" "),e("li",[e("p",[t._v("Staged"),e("br"),t._v("\ngit add 之后的状态")])])]),t._v(" "),e("h2",{attrs:{id:"reset的三种模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reset的三种模式"}},[t._v("#")]),t._v(" reset的三种模式")]),t._v(" "),e("p",[t._v("使用git reset后面的后缀")]),t._v(" "),e("ol",[e("li",[t._v("--hard 不保存所有变更")]),t._v(" "),e("li",[t._v("--soft 保留变更且变更内容处于Stged")]),t._v(" "),e("li",[t._v("--mixed 保留变更且变更内容处于Modified")])])])}),[],!1,null,null,null);i.default=_.exports}}]);