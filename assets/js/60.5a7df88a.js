(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{701:function(t,a,r){"use strict";r.r(a);var s=r(88),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"vue路由"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue路由"}},[t._v("#")]),t._v(" vue路由")]),t._v(" "),r("h2",{attrs:{id:"前端路由和后端路由的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前端路由和后端路由的区别"}},[t._v("#")]),t._v(" 前端路由和后端路由的区别")]),t._v(" "),r("ul",[r("li",[t._v("后端路由(mvc模式)\n"),r("ul",[r("li",[t._v("输入url->向服务器发送请求->解析对应的路径>达到对应的页面->返回给前端")]),t._v(" "),r("li",[t._v("在服务端进行  每次跳转页面都需要向服务器请求")])])]),t._v(" "),r("li",[t._v("前端路由(mvvm模式)\n"),r("ul",[r("li",[t._v("输入url->JS解析地址->找到对应地址的页面->执行生成页面的JS->渲染完成")]),t._v(" "),r("li",[t._v("在浏览器进行 只在第一次加载页面时向服务器发送请求（除了懒加载和服务端渲染的情况下）")])])])]),t._v(" "),r("h2",{attrs:{id:"hash和history模式的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hash和history模式的区别"}},[t._v("#")]),t._v(" hash和history模式的区别")]),t._v(" "),r("img",{attrs:{src:"/assets/img/vrouter1.jpg",width:"500",height:"auto",align:"middle"}}),t._v(" "),r("h2",{attrs:{id:"小知识"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#小知识"}},[t._v("#")]),t._v(" 小知识")]),t._v(" "),r("h3",{attrs:{id:"route-matched"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#route-matched"}},[t._v("#")]),t._v(" $route.matched")]),t._v(" "),r("p",[t._v("一个数组，包含当前路由的所有嵌套路径片段的路由记录 。路由记录就是 routes 配置数组中的对象副本 (还有在 children 数组)。")]),t._v(" "),r("h3",{attrs:{id:"route-fullpath"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#route-fullpath"}},[t._v("#")]),t._v(" $route.fullPath")]),t._v(" "),r("p",[t._v("路由是：/path/:type真正路径是：/path/list"),r("br"),t._v("\npath匹配路径: /path/list"),r("br"),t._v("\nfullPath匹配路由: /path/:type")])])}),[],!1,null,null,null);a.default=e.exports}}]);