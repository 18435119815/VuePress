(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{696:function(s,n,a){"use strict";a.r(n);var e=a(88),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[s._v("#")]),s._v(" typeScript")]),s._v(" "),a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("h3",{attrs:{id:"javascript-与-typescript-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-与-typescript-的区别"}},[s._v("#")]),s._v(" JavaScript 与 TypeScript 的区别")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改，TypeScript 通过类型注解提供编译时的静态类型检查。")])]),s._v(" "),a("li",[a("p",[s._v("TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译。\n"),a("img",{attrs:{src:"/assets/img/ts1.jpg",width:"200",height:"auto",align:"middle"}}),s._v(" "),a("img",{attrs:{src:"/assets/img/ts2.jpg",width:"200",height:"auto",align:"middle"}})])])]),s._v(" "),a("h2",{attrs:{id:"调试环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调试环境"}},[s._v("#")]),s._v(" 调试环境")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("安装"),a("br"),s._v(" "),a("code",[s._v("npm install typeScript -g")])])]),s._v(" "),a("li",[a("p",[s._v("配置文件"),a("br"),s._v(" "),a("code",[s._v("tsc --init")]),s._v("   输入完成后，就会出现tsconfig.json文件( typescript 的编译配置文件)，想要此文件生效的话编译时直接运行"),a("code",[s._v("tsc")]),s._v("命令"),a("br"),s._v(" "),a("code",[s._v("npm init")])])]),s._v(" "),a("li",[a("p",[s._v("在现有的vue项目中加入ts"),a("br"),s._v(" "),a("code",[s._v("vue add @vue/typescript")]),a("br"),s._v("\n之后会出现一些选项，第一项yes，其余No即可\n安装完成之后会发现文件夹里多了一些文件，"),a("br"),s._v("\n打开"),a("code",[s._v("main.ts")]),s._v("会发现多了一些红色波浪线\n"),a("img",{attrs:{src:"/assets/img/tsError.jpg",width:"700",height:"auto",align:"middle"}}),s._v("\n打开"),a("code",[s._v("ts.config.json")]),a("br"),s._v("\n加入"),a("code",[s._v('"noImplicitAny":false')]),s._v("即可"),a("br"),s._v(" "),a("img",{attrs:{src:"/assets/img/tsError1.jpg",width:"300",height:"auto",align:"middle"}})])])]),s._v(" "),a("h2",{attrs:{id:"基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[s._v("#")]),s._v(" 基本语法")]),s._v(" "),a("blockquote",[a("p",[s._v("typeScript的静态类型分为两种：基础静态类型和对象静态类型")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//基础静态类型 null undefined boolean void symbol\nconst num:number = 2;\nconst str:string = 'aiyouwei';\n\n//对象静态类型 对象 数组 类 函数\nconst obj:{\n    name:string,\n    age:number\n} = {\n    name:'lele',\n    age:20\n}\n\nconst arr:string[] = ['lele','jingjing','feifei']\n\nclass duixiang{}\nconst lele:duixiang = new duixiang()\n\nconst wife:()=>string = ()=>{return 'lele'}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h3",{attrs:{id:"_1-类型注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-类型注解"}},[s._v("#")]),s._v(" 1.  类型注解")]),s._v(" "),a("p",[s._v("声明的时候直接写好变量类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a:String;\na = ''\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_2-类型推论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-类型推论"}},[s._v("#")]),s._v(" 2.  类型推论")]),s._v(" "),a("p",[s._v("声明的时候直接赋值，会自动以该值的类型为准")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var b = true;\nb = 2;(报错)\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_3-多种类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-多种类型"}},[s._v("#")]),s._v(" 3.  多种类型")]),s._v(" "),a("p",[s._v("可以设置两个类型"),a("br"),s._v(" "),a("code",[s._v("var c : String | undefined;")])]),s._v(" "),a("h3",{attrs:{id:"_4-任意类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-任意类型"}},[s._v("#")]),s._v(" 4.  任意类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var d : any;\nd = 1;\nd = 'tom';\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_5-类型数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-类型数组"}},[s._v("#")]),s._v(" 5.  类型数组")]),s._v(" "),a("p",[s._v("声明数组中的元素类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var arr : String[]\narr = ['Tom','Jerry']\n//当然也可以用any类型\nvar arr1 : any[]\narr1 = [1,'Tom',true]\n\n//两种类型的写法\nconst arr1 : (number|string)[] = [1,2,'lele']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"_6-函数返回类型约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-函数返回类型约束"}},[s._v("#")]),s._v(" 6.  函数返回类型约束")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//有返回值的\nfunction add(val : String) : String{\n    return \"hey\"+val\n}\n\n//没有返回值的  使用void类型\nfunction reduce(val : String) : void{\n    console.log('无返回值用void类型')\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"_7-对象参数属性值约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-对象参数属性值约束"}},[s._v("#")]),s._v(" 7.  对象参数属性值约束")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function test1(obj:{person:String}){}\ntest1({person:'string'})\n\n\n//使用type声明一个类型\n//上面的例子也可以这么写  \ntype Person = {person:String}\nfunction test2(obj:Person){}\ntest2({person:'string'})\n//再来一个\ntype lady = {name:string,age:number}\nconst arr : lady[] = [\n    {name:'乐乐',age:19},\n    {name:'静静',age:25}\n]\n\n\n\n\nfunction add({one,two}:{one:number,two:number}){\n    return one + two \n}\nconst a = add({one:1,two:2})\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h3",{attrs:{id:"_8-类型断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-类型断言"}},[s._v("#")]),s._v(" 8.  类型断言")]),s._v(" "),a("p",[s._v("某些情况下用户会比编译器更确定某个变量的具体类型，可用类型断言as")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const someValue: any = "this is a string"; \nconst strLength = (someValue as string).length;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_9-联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-联合类型"}},[s._v("#")]),s._v(" 9.  联合类型")]),s._v(" "),a("p",[s._v("希望某个变量或参数的类型是多种类型其中之一")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let union: string | number; \nunion = '1'; // ok \nunion = 1; // ok\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_10-交叉类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-交叉类型"}},[s._v("#")]),s._v(" 10. 交叉类型")]),s._v(" "),a("p",[s._v("想要定义某种由多种类型合并而成的类型使用交叉类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type First = {first: number}; \ntype Second = {second: number}; \ntype FirstAndSecond = First & Second; \nfunction fn3(param: FirstAndSecond): FirstAndSecond { \n    return {first:1, second:2} \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"_11-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-函数"}},[s._v("#")]),s._v(" 11. 函数")]),s._v(" "),a("ul",[a("li",[s._v("必填参：参数一旦声明，就要求传递，且类型需符合")]),s._v(" "),a("li",[s._v("可选参：用？来标识参数可选填(没有默认值)")]),s._v(" "),a("li",[s._v("参数可以用=添加默认值")])]),s._v(" "),a("h3",{attrs:{id:"_12-函数重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-函数重载"}},[s._v("#")]),s._v(" 12. 函数重载")]),s._v(" "),a("p",[s._v("以参数数量或类型区分多个同名函数(多用于写源码或者框架)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 重载1 \nfunction watch(cb1: () => void): void; \n// 重载2 \nfunction watch(cb1: () => void, cb2: (v1: any, v2: any) => void): void; \n// 实现 \nfunction watch(cb1: () => void, cb2?: (v1: any, v2: any) => void) { \n    if (cb1 && cb2) { c\n    onsole.log('执行watch重载2'); \n    } else { \n        console.log('执行watch重载1'); \n    } \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"_13-class类的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-class类的特性"}},[s._v("#")]),s._v(" 13. class类的特性")]),s._v(" "),a("ul",[a("li",[s._v("ts中的类和es6中大体相同")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Parent { \n    public  head = \'head\';      // 公共属性，可以在 当前类 的内部外部访问\n    private _foo = "foo";       // 私有属性(一般以下划线开头)，不能在类的外部访问，包括 new出来的对象和继承的子类\n    protected bar = "bar";      // 保护属性，可以在 当前类的内部 和 继承子类 中访问，new出来的不可以\n    public readonly _eyes = 2;   // 只读属性(一般以下划线开头)，修改会直接报错\n    \n    // 参数属性：构造函数参数加修饰符，能够定义为成员属性  跟写在上面的三个属性的效果相同\n    constructor(public tua = "tua") {} \n    \n    // 方法也有修饰符 private someMethod() {} \n    \n    // 存取器：访问私有属性，可添加额外逻辑，控制读写性 \n    get foo() { return this._foo; }\n    set foo(val) { this._foo = val; } \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("ul",[a("li",[s._v("类的继承及super的使用")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class people{\n    eyes = 2;\n    mouth = 1;\n    nose = 1;\n    eyebrow = 2;\n    say(){\n        return '父类'\n    }\n    static sayLove(){           //如果想要不new对象而直接使用类的属性和方法   则需要用static，这样可以通过people.sayLove()直接访问\n        return 'i love you'\n    }\n}\n\nclass man extends people{\n    constructor(){              //子类中如果要写构造函数，则必须用super()调用父类的构造函数，否则报错(父类中不写constructor也是有默认有的)\n        super()\n    }               \n    say(){\n        return 'Im man!I can use'+ super.say() + 'methods'   //super可以调用父类中的方法\n    }\n}\n\nconst man1 = new man()\nman1.say()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("ul",[a("li",[s._v("抽象类\n"),a("ul",[a("li",[s._v("抽象类的关键词是abstract,里边的抽象方法也是abstract开头的")])])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class Girl{\n abstract skill()   \n}\n\n//继承子类会被要求必须要有skill这个方法\nclass Waiter extends Girl{\n    skill(){\n        console.log('您好 我是服务员')\n    }\n}\n\nclass BaseTeacher extends Girl{\n    skill(){\n        console.log('您好 我是初级技师')\n    }\n}\n\nclass seniorTeacher extends Girl{\n    skill(){\n        console.log('您好 我是高级技师')\n    }\n}\n\nconst senior = new seniorTeacher()\nconsole.log(senior.skill())\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h3",{attrs:{id:"_14-interface接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-interface接口"}},[s._v("#")]),s._v(" 14. interface接口")]),s._v(" "),a("p",[s._v("接口仅约束结构，不要求实现，使用更简单")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// Person接口定义了解构 \ninterface Person {\n    firstName: string; \n    lastName: string;\n    lele ?: string;             //可选参数?:\n    [propname:string]:any       //任意键值对propname\n }\n\n// greeting函数通过Person接口约束参数解构 \nfunction greeting(person: Person) { \n    return 'Hello, ' + person.firstName + ' ' + person.lastName; \n}\n\ngreeting({firstName: 'Jane', lastName: 'User'}); // 正确 \ngreeting({firstName: 'Jane'}); // 错误\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("//利用接口来约束类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class girl2 implements Person {\n    firstName= '范'; \n    lastName= '彩乐';\n    lele = '乐乐';     \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("//接口间的继承")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface people extends Person {\n  say(): string;        \n}\n\n此时的people不仅有Person的全部属性  还多了一个say方法\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_15-泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-泛型"}},[s._v("#")]),s._v(" 15. 泛型")]),s._v(" "),a("p",[s._v("泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。以此增加代码通用性。"),a("br"),s._v("\n泛型的定义使用<>（尖角号）进行定义的。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("1.    比如现在给aiyouwei方法一个泛型，名字就叫做T(大多数情况都用T，自定义语义化也可以)\n```\nfunction aiyouwei<T>(first:T,second:T){\n    return `${first}${second}`\n}\n//调用函数的时候指定泛型类型\nconst name1= aiyouwei<number>(1,1)\n```\n2.  多个泛型的使用\n```\nfunction aiyouhei<T,P>(first:T,second:P){\n    return `${first}${second}`\n}\n\nconst name2= aiyouhei<number,string>(1,'hey')\n//此处这么写也是可以的，反省也有类型推断\n//const name2= aiyouhei(1,'hey')\n```\n\n3.  在类中使用泛型\n```\n//不使用泛型的\nclass Girl{\n    constructor(private girl:string[]){}\n    getName(index:number):string{\n        return this.girl[index]\n    }\n}\n\nconst girl = new Girl(['乐乐','菁菁','琪琪'])\n\nconsole.log(girl.getName(2))\n//使用泛型的\nclass Girl1<T>{\n    constructor(private girl:T[]){}\n    getName(index:number):T{\n        return this.girl[index]\n    }\n}\n\nconst girl1 = new Girl1<string>(['乐乐','菁菁','琪琪'])\n\nconsole.log(girl1.getName(2))\n```\n\n4.  泛型的继承\n```\ninterface geshi{\n    name:string\n}\n\nclass Girl1<T extends geshi>{\n    constructor(private girl:T[]){}\n    getName(index:number):string{\n        return this.girl[index].name\n    }\n}\n\nconst girl1 = new Girl1([\n    {name:'乐乐'},\n    {name:'菁菁'},\n    {name:'琪琪'}\n])\n\nconsole.log(girl1.getName(2))\n```\n\n5.  泛型的约束\n```\nclass SelectGirl<T extends number | string> {\n    //.....\n}\n```\n\n**泛型优点：**\n- 函数和类可以支持多种类型，更加通用\n- 不必编写多条重载，冗长联合类型，可读性好\n- 灵活控制类型约束\n- 不仅通用且能灵活控制，泛型被广泛用于通用库的编写。\n")])])]),a("h3",{attrs:{id:"_16-枚举-enum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-枚举-enum"}},[s._v("#")]),s._v(" 16. 枚举 (Enum)")]),s._v(" "),a("blockquote",[a("p",[s._v("枚举是基于 0 的，也就是说第一个值是 0，后面的值依次递增。不要担心，当中的每一个值都可以显式指定，只要不出现重复即可，没有被显式指定的值，都会在前一个值的基础上递增。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// enum Color { \n//     Red,\n//     Green, \n//     Blue \n// }\n// let c: Color = Color.Green;  // 1\n\nenum Color {\n    Red = 1, \n    Green, \n    Blue = 4\n}\nlet c: Color = Color.Green;  // 2\n\n枚举有一个很方便的特性，也可以向枚举传递一个数值，然后获取它对应的名称值。(即通过下标获取key值)\n\nlet colorName: string = Color[2];  // 'Green'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h3",{attrs:{id:"namespace命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#namespace命名空间"}},[s._v("#")]),s._v(" namespace命名空间")]),s._v(" "),a("p",[s._v("有时候为了防止全局变量污染，我们需要用到namaspace命名空间。需要使用的可以用export导出，被导出的才会变成全局变量。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("namespace Home{\n    class Header{\n        constructor(){\n        }\n    }\n    \n    class Content{\n        constructor(){\n        }\n    }\n    \n    class Footer{\n        constructor(){\n        }\n    }\n    \n    export class Page{   \n        constructor() {\n            new Header();\n            new Content();\n            new Footer();      \n        }   \n    }\n}\n\n//调用  Home.Page()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[a("strong",[s._v("子命名空间")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("namespace Components {\n  export namespace SubComponents {\n    export class Test {}\n  }\n\n  //someting ...\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"tsconfig-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tsconfig-json"}},[s._v("#")]),s._v(" tsconfig.json")]),s._v(" "),a("p",[s._v("新建文件夹，进入vscode服务台，运行"),a("code",[s._v("tsc --init")]),s._v("就会发现多了一个"),a("code",[s._v("tsconfig.json")]),s._v("的文件，这是ts的编译配置文件，用来配置如何对ts文件进行编译的。")]),s._v(" "),a("p",[a("strong",[s._v("详情查阅")]),a("br"),s._v(" "),a("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("编译选项详解"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("注意事项")])]),s._v(" "),a("ol",[a("li",[s._v("配置文件不支持单引号，所以里边都要使用双引号")]),s._v(" "),a("li",[a("code",[s._v("ts-node")]),s._v("命令也遵循"),a("code",[s._v("tsconfig.json")]),s._v("配置")])]),s._v(" "),a("p",[a("strong",[s._v("编译单个ts文件")]),a("br"),s._v(" "),a("code",[s._v("tsc demo.ts")]),s._v("\n需要注意的是使用这个命令tsconfig.json配置是不生效的,此时需要运行"),a("code",[s._v("tsc")]),s._v("才可以。但是这么做会将所有的ts文件都进行编译。如果我们只想编译单个ts文件该怎么做呢(假设此时目录中有demo.ts、other.ts，我们想编译的是demo.ts)")]),s._v(" "),a("ol",[a("li",[s._v("include(包含)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    "include":["demo.ts"]`\n    "compilerOptions": {\n        //........\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("exclude(不包含)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    "exclude":["other.ts"]`\n    "compilerOptions": {\n        //........\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("files(同include)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    "files":["demo.ts"]`\n    "compilerOptions": {\n        //........\n    }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"compileroptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compileroptions"}},[s._v("#")]),s._v(" compilerOptions")]),s._v(" "),a("p",[s._v("它是告诉TypeScript具体如何编译成js文件的，里边的配置项非常多")]),s._v(" "),a("p",[a("strong",[s._v("removeComments")]),a("br"),s._v("\n告诉TypeScript编译出来的文件是否显示注。true为不显示。")]),s._v(" "),a("p",[a("strong",[s._v("strict")]),a("br"),s._v("\n我们的编译和书写规范，是否要按照TypeScript最严格的规范来写。true就是要。")]),s._v(" "),a("p",[a("strong",[s._v("noImplicitAny")]),a("br"),s._v("\n当注解类型为any，是否需要注明。true就是需要写清楚。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function jspang(name) {\n  return name;\n}\n//true报错，false不报错\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("strictNullChecks")]),a("br"),s._v("\n是否强制检查null类型。true就是检查。\n"),a("code",[s._v("const jspang: string = null; //true报错，false不报错")])]),s._v(" "),a("p",[a("strong",[s._v("rootDir & outDir")]),a("br"),s._v("\n出入口文件配置。比如我们把所有的 ts 文件都放到 src 下,编译出来 js 文件我们希望放在 build 下。那我们就得这么写：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('    "outDir": "./build" ,\n    "rootDir": "./src" \n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("noUnusedLocals & noUnusedParameters")]),a("br"),s._v("\n对于没有使用却声明了的变量和方法的限制。设置为true，有未使用的编译时就会报错")]),s._v(" "),a("p",[a("strong",[s._v("sourceMap")]),a("br"),s._v("\n如果把sourceMap的注释去掉，在打包的过程中就会给我们生成sourceMap文件.")]),s._v(" "),a("blockquote",[a("p",[s._v("sourceMap 简单说，Source map 就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便。")])])])}),[],!1,null,null,null);n.default=t.exports}}]);